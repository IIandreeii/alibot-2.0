{
    "sourceFile": "src/pages/admin/components/form/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740153577108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740153584268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useForm } from 'react-hook-form';\n import { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\n import { Toast } from 'primereact/toast';\n import { usePhoneNumberWithLoader } from 'services/phone-number/getPhoneNumber.service';\n-import { usePhoneNumberWithLoader } from '../../..';\n+import { usePhoneNumberWithLoader } from '../../../';\n import { ContainerGroup, ErrorMessage, FormContainer, Input, InputContainer, Label, SubmitButton } from './styles';\n import Cookies from 'js-cookie';\n import { Checkbox } from 'primereact/checkbox';\n \n"
                }
            ],
            "date": 1740153577108,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\nimport { Toast } from 'primereact/toast';\nimport { usePhoneNumberWithLoader } from 'services/phone-number/getPhoneNumber.service';\nimport { usePhoneNumberWithLoader } from 'services/phone-number/getPhoneNumber.service';\nimport { ContainerGroup, ErrorMessage, FormContainer, Input, InputContainer, Label, SubmitButton } from './styles';\nimport Cookies from 'js-cookie';\nimport { Checkbox } from 'primereact/checkbox';\n\ninterface FormData {\n    accountUserId: number;\n    phoneNumberId: string;\n    phone: string;\n    tokenMeta: string;\n    nickname: string;\n    wabaId: string;\n    openaiApiKey: string;\n}\n\ninterface Props {\n    closeModal: () => void;\n    setLoaderService: (data: boolean) => void;\n    dataEdit: any;\n    isDeletingUser: boolean; // Recibe el estado de eliminación\n}\n\nconst UserForm: React.FC<Props> = ({ closeModal, setLoaderService, dataEdit, isDeletingUser }) => {\n    const { register, handleSubmit, setValue, formState: { errors, isValid } } = useForm<FormData>({\n        mode: 'onChange'\n    });\n    const { postPhoneNumber, putPhoneNumber, loader } = usePhoneNumberWithLoader();\n    const [isEditMode, setIsEditMode] = useState(false);\n    const toast = useRef<any>(null);\n    const [isChecked, setisChecked] = useState(false);\n\n    const confirmCreateUser = (data: FormData) => {\n        confirmPopup({\n            className: \"toast_custom\",\n            appendTo: document.getElementById('submitButton') as HTMLElement,\n            message: dataEdit?.action === 'edit' ? '¿Estás seguro de editar al número?' : '¿Estás seguro de crear al número?',\n            icon: 'pi pi-exclamation-triangle',\n            defaultFocus: 'accept',\n            acceptLabel: 'SI',\n            rejectLabel: 'NO',\n            accept: () => accept(data),\n            reject: closeModal\n        });\n    };\n\n    const onSubmit = (data: FormData) => confirmCreateUser(data);\n\n    const accept = async (data: FormData | null) => {\n        const storedId = Cookies.get('authId');\n\n        if (!data) return;\n        setLoaderService(true);\n\n        try {\n            if (dataEdit?.action === 'edit' && dataEdit.phoneNumberId) {\n                await putPhoneNumber(\n                    { phoneNumberId: data.phoneNumberId, tokenMeta: data.tokenMeta, isAssistantAi: isChecked, nickname: data.nickname, wabaId: data.wabaId, openaiApiKey: data.openaiApiKey },\n                    dataEdit.id\n                );\n                setLoaderService(false);\n                closeModal();\n            } else {\n                await postPhoneNumber({ ...data, isAssistantAi: isChecked, accountUserId: Number(storedId) || 1 });\n                setLoaderService(false);\n                closeModal();\n            }\n        } catch (error) {\n            setLoaderService(false);\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'Hubo un error al procesar el usuario', life: 3000 });\n        }\n    };\n\n    useEffect(() => {\n        if (dataEdit?.action === 'edit' && dataEdit.phoneNumberId) {\n            setValue('accountUserId', dataEdit.id, { shouldValidate: true });\n            setValue('phoneNumberId', dataEdit.phoneNumberId, { shouldValidate: true });\n            setValue('tokenMeta', dataEdit.tokenMeta, { shouldValidate: true });\n            setValue('phone', dataEdit.phone, { shouldValidate: true });\n            setValue('nickname', dataEdit.nickname, { shouldValidate: true });\n            setValue('wabaId', dataEdit.wabaId, { shouldValidate: true });\n            setValue('openaiApiKey', dataEdit.openaiApiKey, { shouldValidate: false });\n            setisChecked(dataEdit.isAssistantAi);\n            setIsEditMode(true);\n        }\n    }, [dataEdit, setValue]);\n\n    return (\n        <FormContainer onSubmit={handleSubmit(onSubmit)}>\n            <Toast ref={toast} />\n            <h4>{isEditMode ? 'Editar número' : 'Crear número'} #<span>03</span></h4>\n            <ContainerGroup>\n                <InputContainer>\n                    <Label htmlFor=\"phoneNumberId\">Identificador de teléfono:</Label>\n                    <Input\n                        id=\"phoneNumberId\"\n                        type=\"tel\"\n                        {...register('phoneNumberId', { required: 'Campo obligatorio' })}\n                    />\n                    {errors.phoneNumberId && <ErrorMessage>{errors.phoneNumberId.message}</ErrorMessage>}\n                </InputContainer>\n\n                <InputContainer>\n                    <Label htmlFor=\"phone\">Número de celular:</Label>\n                    <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        {...register('phone', { required: 'Campo obligatorio' })}\n                    />\n                    {errors.phoneNumberId && <ErrorMessage>{errors.phoneNumberId.message}</ErrorMessage>}\n                </InputContainer>\n\n                <InputContainer>\n                    <Label htmlFor=\"tokenMeta\">Token:</Label>\n                    <Input\n                        id=\"tokenMeta\"\n                        {...register('tokenMeta', { required: 'Campo obligatorio' })}\n                    />\n                    {errors.tokenMeta && <ErrorMessage>{errors.tokenMeta.message}</ErrorMessage>}\n                </InputContainer>\n\n                <InputContainer>\n                    <Label htmlFor=\"nickname\">Nickname:</Label>\n                    <Input\n                        id=\"nickname\"\n                        {...register('nickname', { required: 'Campo obligatorio' })}\n                    />\n                    {errors.nickname && <ErrorMessage>{errors.nickname.message}</ErrorMessage>}\n                </InputContainer>\n\n                <InputContainer>\n                    <Label htmlFor=\"wabaId\">Identificador de WhatsApp Business:</Label>\n                    <Input\n                        id=\"wabaId\"\n                        {...register('wabaId', { required: 'Campo obligatorio' })}\n                    />\n                    {errors.wabaId && <ErrorMessage>{errors.wabaId.message}</ErrorMessage>}\n                </InputContainer>\n\n                <InputContainer>\n                    <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n                        <Checkbox\n                            inputId=\"isAssistantAi\"\n                            onChange={(e) => setisChecked(e.checked || false)}\n                            checked={isChecked}\n                            style={{ boxSizing: 'border-box', backgroundColor: 'white', border: '1px solid black', borderRadius: '1px', width: '20px', height: '24px' }}\n                            />\n                        <span style={{ marginLeft: '8px' }}>Activar Asistente IA</span>\n                    </label>\n                </InputContainer>\n\n                <InputContainer>\n                    <Label htmlFor=\"openaiApiKey\">Api key OpenAI:</Label>\n                    <Input\n                        id=\"openaiApiKey\"\n                        {...register('openaiApiKey', { required: '' })}\n                    />\n                    {errors.openaiApiKey && <ErrorMessage>{errors.openaiApiKey.message}</ErrorMessage>}\n                </InputContainer>\n\n            </ContainerGroup>\n\n            <div id='submitButton' style={{ position: 'relative' }}>\n                <SubmitButton type=\"submit\" disabled={!isValid || loader.loading}>\n                    {loader.loading ? <img src=\"/assets/icons/icon-loader.svg\" alt=\"Icon loader\" /> : isEditMode ? 'Guardar' : 'Crear usuario'}\n                </SubmitButton>\n            </div>\n\n            <ConfirmPopup className='toast_delete' />\n        </FormContainer>\n    );\n};\n\nexport default UserForm;\n"
        }
    ]
}