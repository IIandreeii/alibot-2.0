{
    "sourceFile": "src/pages/admin/components/dynamicTable/components/forms/form-products/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740154244611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740154251762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,11 @@\n import styled from 'styled-components';\n import { Controller, useForm } from 'react-hook-form';\n import { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\n import { Toast } from 'primereact/toast';\n-import { useTemplate } from 'services/template/template.service';\n+import { useTemplate } from '../../../../../../../services/template/template.service';\n import { useSearchParams } from 'react-router-dom';\n+import { useChatContext } from '../../../../../../../pages/chat/context/chat';\n import ReactQuill from 'react-quill';\n \n interface FormData {\n   storeId: number,\n"
                }
            ],
            "date": 1740154244611,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Controller, useForm } from 'react-hook-form';\nimport { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\nimport { Toast } from 'primereact/toast';\nimport { useTemplate } from 'services/template/template.service';\nimport { useSearchParams } from 'react-router-dom';\nimport ReactQuill from 'react-quill';\n\ninterface FormData {\n  storeId: number,\n  shopifyProductId: string,\n  text: string,\n  urlImage: string,\n  urlVideo: string,\n  textVideo: string,\n  name: string,\n  prompt: string,\n  temperature: number\n  maxTokens: number\n}\n\nconst FormContainer = styled.form`\n  width: 500px;\n  max-width: 500px;\n  margin: 5px auto;\n  padding: 0 30px;\n  margin-bottom: 40px;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    max-width: 100%;\n  }\n\n  h4 {\n    font-size: 22px;\n    color: #2c303c;\n    font-weight: 600;\n    text-align: center;\n    padding-bottom: 10px;\n    margin-bottom: 20px;\n    border-bottom: 1px solid #e0e0e0;\n    span {\n      color: #7c8c9c;\n    }\n  }\n`;\n\nconst InputContainer = styled.div`\n \n`;\n\nconst SelectContainer = styled.div`\n \n`;\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n  font-size: 16px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 14px;\n  \n  border: 1px solid #ccc;\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst ErrorMessage = styled.p`\n  color: red;\n  font-size: 12px;\n`;\n\nconst SubmitButton = styled.button`\n  background-color: #2D2E83;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background-color: #3C58A4;\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst ScrollableQuill = styled(ReactQuill)`\n   width: 400px; \n  .ql-editor {\n    max-height: 50px; \n    overflow-y: auto;\n  }\n`;\n\ninterface Props {\n  closeModal: () => void;\n  setLoaderService: (data: boolean) => void;\n  dataEdit: any;\n  id?: string;\n  isDeletingUser: boolean;\n}\nconst FormProducts: React.FC<Props> = ({\n  closeModal,\n  setLoaderService,\n  dataEdit,\n  id, \n  isDeletingUser,\n}) => {\n  const {\n    control,\n    trigger,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors, isValid },\n  } = useForm<FormData>({ mode: 'onChange' });\n  const [selectedStore, setSelectedStore] = useState<any>(''); \n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const toast = useRef<any>(null);\n  const { postProduct, patchProduct, getStore, getResponse, loader } = useTemplate();\n  const [searchParams] = useSearchParams();\n  const { setShowMessageDialog } = useChatContext();\n\n  useEffect(() => {\n    setShowMessageDialog(true)\n  }, [])\n\n  const confirmCreateUser = (data: FormData) => {\n    \n    if (isDeletingUser) return;\n\n    confirmPopup({\n      className: \"toast_custom\", \n      appendTo: document.getElementById('submitButton') as HTMLElement,\n      message: dataEdit?.action === 'edit' ? '¿Estás seguro de editar la producto?' : '¿Estás seguro de crear la producto?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'SI',\n      rejectLabel: 'NO',\n      accept: () => accept(data),\n      reject: closeModal,\n    });\n  };\n\n  const onSubmit = (data: FormData) => {\n    confirmCreateUser(data)\n  };\n\n  useEffect(() => {\n    getStore(searchParams.get('id') || 1)\n  }, [])\n\n  const accept = async (data: FormData) => {\n    setLoaderService(true);\n    \n    try {\n      if (dataEdit?.action === 'edit') {\n        await patchProduct({ ...data }, Number(dataEdit?.data?.id));\n      } else {\n        await postProduct({ ...data, id: Number(id)});\n      }\n      closeModal();\n    } catch (error) {\n      toast.current.show({ severity: 'error', summary: 'Error', detail: 'Hubo un error', life: 3000 });\n    } finally {\n      setLoaderService(false);\n    }\n  };\n\n  useEffect(() => {\n    if (dataEdit?.action === 'edit') {\n      setIsEditMode(true);\n      setSelectedStore(`${dataEdit.data.storeId}`);\n      setValue('storeId', dataEdit.data.storeId);\n      setValue('name', dataEdit.data.name);\n      setValue('prompt', dataEdit.data.prompt);\n      setValue('temperature', dataEdit.data.temperature);\n      setValue('maxTokens', dataEdit.data.maxTokens);\n      trigger();\n    }\n  }, [searchParams, dataEdit, setValue, trigger]);\n\n  return (\n    <FormContainer onSubmit={handleSubmit(onSubmit)}>\n      <Toast ref={toast} />\n      <h4>{isEditMode ? 'Editar producto' : 'Crear producto'}</h4>\n\n      {/*\n      <InputContainer>\n        <Label htmlFor=\"text\">Texto video:</Label>\n        <Input id=\"text\" {...register('text', { required: 'Este campo es obligatorio' })} />\n        {errors.text && <ErrorMessage>{errors.text.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"urlImage\">Url Imagen:</Label>\n        <Textarea id=\"urlImage\" {...register('urlImage', { required: 'Este campo es obligatorio' })} />\n        {errors.urlImage && <ErrorMessage>{errors.urlImage.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"urlVideo\">Url Video:</Label>\n        <Textarea id=\"urlVideo\" {...register('urlVideo', { required: 'Este campo es obligatorio' })} />\n        {errors.urlVideo && <ErrorMessage>{errors.urlVideo.message}</ErrorMessage>}\n      </InputContainer>\n      */}\n\n      <SelectContainer>\n        <Label htmlFor=\"storeId\">Tienda:</Label>\n        <Select\n          id=\"storeId\"\n          value={selectedStore}\n          {...register('storeId', {\n            required: 'Este campo es obligatorio',\n            validate: (value: any) => value !== '' || 'Por favor, selecciona una tienda',\n          })}\n          onChange={(e) => setSelectedStore(e.target.value)}\n        >\n          <option value=\"\">Seleccione tienda</option>\n          {getResponse.map((option: any) => (\n            <option key={option.id} value={`${option.id}`}>\n              {option.name}\n            </option>\n          ))}\n        </Select>\n        {errors.storeId && <ErrorMessage>{errors.storeId.message}</ErrorMessage>}\n      </SelectContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"name\">Nombre de producto:</Label>\n        <Input id=\"name\" {...register('name', { required: 'Este campo es obligatorio' })} />\n        {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"prompt\">Prompt del Sistema:</Label>\n        <Controller\n          name=\"prompt\"\n          control={control}\n          rules={{ required: 'Este campo es obligatorio' }}\n          render={({ field }) => (\n            <ScrollableQuill\n              {...field}\n              theme=\"snow\"\n              placeholder=\"Personalidad y contexto principal del chatbot\"\n            />\n          )}\n        />\n        {errors.prompt && <ErrorMessage>{errors.prompt.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"maxTokens\">Máximo de tokens:</Label>\n        <Input id=\"maxTokens\" placeholder='Longitud máxima de respuesta' {...register('maxTokens', { required: 'Este campo es obligatorio' })} />\n        {errors.maxTokens && <ErrorMessage>{errors.maxTokens.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"temperature\">Temperatura:</Label>\n        <Input id=\"temperature\" placeholder='Controla creatividad (0 - 2)' {...register('temperature', { required: 'Este campo es obligatorio' })} />\n        {errors.temperature && <ErrorMessage>{errors.temperature.message}</ErrorMessage>}\n      </InputContainer>\n\n      <div id=\"submitButton\" style={{ position: 'relative'}}>\n        <SubmitButton type=\"submit\" disabled={!isValid}>\n          {isEditMode ? 'Guardar' : 'Crear producto'}\n        </SubmitButton>\n      </div>\n\n    </FormContainer>\n  );\n};\n\nexport default FormProducts;\n"
        }
    ]
}