{
    "sourceFile": "src/pages/admin/components/dynamicTable/components/forms/form-respuesta/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740154132020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740154144154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Controller, useForm } from 'react-hook-form';\n import { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\n import { Toast } from 'primereact/toast';\n import { useTemplate } from '../../../../../../../services/template/template.service';\n-import { useChatContext } from 'pages/chat/context/chat';\n+import { useChatContext } from '../../../../../../../pages/chat/context/chat';\n import { Checkbox } from 'primereact/checkbox';\n import ReactQuill from 'react-quill'; // Importar Quill\n import 'react-quill/dist/quill.snow.css'; // Importar el estilo de Quill\n import { htmlToText } from 'html-to-text';\n"
                },
                {
                    "date": 1740154165599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useChatContext } from '../../../../../../../pages/chat/context/chat';\n import { Checkbox } from 'primereact/checkbox';\n import ReactQuill from 'react-quill'; // Importar Quill\n import 'react-quill/dist/quill.snow.css'; // Importar el estilo de Quill\n-import { htmlToText } from 'html-to-text';\n+import { type htmlToText } from 'html-to-text';\n import { storage } from '../../../../../../../libs/firebase'; // Asegúrate de que esta ruta sea correcta\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n \n interface FormData {\n"
                },
                {
                    "date": 1740154171742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { useChatContext } from '../../../../../../../pages/chat/context/chat';\n import { Checkbox } from 'primereact/checkbox';\n import ReactQuill from 'react-quill'; // Importar Quill\n import 'react-quill/dist/quill.snow.css'; // Importar el estilo de Quill\n-import { type htmlToText } from 'html-to-text';\n+import { htmlToText } from 'html-to-text';\n import { storage } from '../../../../../../../libs/firebase'; // Asegúrate de que esta ruta sea correcta\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n \n interface FormData {\n"
                }
            ],
            "date": 1740154132020,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Controller, useForm } from 'react-hook-form';\nimport { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\nimport { Toast } from 'primereact/toast';\nimport { useTemplate } from '../../../../../../../services/template/template.service';\nimport { useChatContext } from 'pages/chat/context/chat';\nimport { Checkbox } from 'primereact/checkbox';\nimport ReactQuill from 'react-quill'; // Importar Quill\nimport 'react-quill/dist/quill.snow.css'; // Importar el estilo de Quill\nimport { htmlToText } from 'html-to-text';\nimport { storage } from '../../../../../../../libs/firebase'; // Asegúrate de que esta ruta sea correcta\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\ninterface FormData {\n  upsellText: string;\n  upsellImage: File | string;\n  upsellVideo: File | string;\n  upsellTextVideo: string;\n  keyword: string;\n  isConfirmed: boolean;\n  isInformative: boolean;\n}\n\nconst FormContainer = styled.form`\n  width: 100%;\n  max-width: 500px; /* Ajustar el tamaño máximo del formulario */\n  margin: 10px auto;\n  padding: 0 10px;\n  margin-bottom: 30px;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    max-width: 100%;\n  }\n  h4 {\n    font-size: 18px; /* Reducir el tamaño de la fuente */\n    color: #2c303c;\n    font-weight: 600;\n    text-align: center;\n    padding-bottom: 10px;\n    margin-bottom: 20px;\n    border-bottom: 1px solid #e0e0e0;\n    span {\n      color: #7c8c9c;\n    }\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n  font-size: 12px; /* Reducir el tamaño de la fuente */\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 6px; /* Reducir el padding */\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 12px;\n\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst ErrorMessage = styled.p`\n  color: red;\n  font-size: 10px; /* Reducir el tamaño de la fuente */\n`;\n\nconst SubmitButton = styled.button`\n  background-color: #2D2E83;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 8px 16px; /* Reducir el padding */\n  font-size: 14px; /* Reducir el tamaño de la fuente */\n  cursor: pointer;\n  transition: background-color 0.3s;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background-color: #3C58A4;\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  justify-content: space-between; \n`;\n\nconst ScrollableQuill = styled(ReactQuill)`\n  .ql-editor {\n    max-height: 50px; \n    overflow-y: auto;\n  }\n`;\n\ninterface Props {\n  closeModal: () => void;\n  setLoaderService: (data: boolean) => void;\n  dataEdit: any;\n  id?: string;\n  isDeletingUser: boolean;\n}\n\nconst FormRespuesta: React.FC<Props> = ({\n  closeModal,\n  setLoaderService,\n  dataEdit,\n  id,\n  isDeletingUser,\n}) => {\n  const {\n    control,\n    trigger,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors, isValid },\n  } = useForm<FormData>({ mode: 'onChange' });\n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const toast = useRef<any>(null);\n  const { postRespuesta, patchRespuesta } = useTemplate();\n  const { setShowMessageDialog } = useChatContext();\n  const [isChecked, setisChecked] = useState(false);\n  const [isInformatived, setInformatived] = useState(false);\n\n  useEffect(() => {\n    setShowMessageDialog(true);\n  }, []);\n\n  const uploadFile = async (file: File, path: string) => {\n    const storageRef = ref(storage, path);\n    await uploadBytes(storageRef, file);\n    return await getDownloadURL(storageRef);\n  };\n\n  const confirmCreateUser = (data: FormData) => {\n    if (isDeletingUser) return;\n\n    confirmPopup({\n      className: 'toast_custom',\n      appendTo: document.getElementById('submitButton') as HTMLElement,\n      message:\n        dataEdit?.action === 'edit'\n          ? '¿Estás seguro de editar la respuesta rápida?'\n          : '¿Estás seguro de crear la respuesta rápida?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'SI',\n      rejectLabel: 'NO',\n      accept: () => accept(data),\n      reject: closeModal,\n    });\n  };\n\n  const onSubmit = async (data: FormData) => {\n    const upsellImageUrl = await uploadFile(data.upsellImage as File, `images/${(data.upsellImage as File).name}`);\n    const upsellVideoUrl = await uploadFile(data.upsellVideo as File, `videos/${(data.upsellVideo as File).name}`);\n    const upsellText = htmlToText(data.upsellText, { wordwrap: 200 });\n    const upsellTextVideo = htmlToText(data.upsellTextVideo, { wordwrap: 200 });\n    console.log('Datos enviados:', { ...data, upsellImage: upsellImageUrl, upsellVideo: upsellVideoUrl, upsellText, upsellTextVideo });\n    confirmCreateUser({ ...data, upsellImage: upsellImageUrl, upsellVideo: upsellVideoUrl, upsellText, upsellTextVideo });\n  };\n\n  const accept = async (data: FormData) => {\n    setLoaderService(true);\n    console.log('data 2', data);\n    \n    const upsellTextVideoParse = htmlToText(data.upsellTextVideo, {\n      wordwrap: 200,\n    });\n  \n    const upsellTextParse = htmlToText(data.upsellText, {\n      wordwrap: 200,\n    });\n  \n    try {\n      if (dataEdit?.action === 'edit') {\n        await patchRespuesta({ ...data, upsellTextVideo: upsellTextVideoParse, upsellText: upsellTextParse, isConfirmed: isChecked, isInformative: isInformatived, id: Number(dataEdit?.data?.id) }, Number(dataEdit?.data?.id));\n      } else {\n        await postRespuesta({ ...data, upsellTextVideo: upsellTextVideoParse, upsellText: upsellTextParse, isConfirmed: isChecked, isInformative: isInformatived, id: Number(id) });\n      }\n      closeModal();\n    } catch (error) {\n      toast.current.show({ severity: 'error', summary: 'Error', detail: 'Hubo un error', life: 3000 });\n    } finally {\n      setLoaderService(false);\n    }\n  };\n\n  useEffect(() => {\n    if (dataEdit?.action === 'edit') {\n      setIsEditMode(true);\n      setValue('upsellText', dataEdit.data.upsellText);\n      setValue('upsellImage', dataEdit.data.upsellImage);\n      setValue('upsellVideo', dataEdit.data.upsellVideo);\n      setValue('upsellTextVideo', dataEdit.data.upsellTextVideo);\n      setValue('keyword', dataEdit.data.keyword);\n     \n      setisChecked(dataEdit.data.isConfirmed);\n      setInformatived(dataEdit.data.isInformative);\n      trigger();\n    }\n  }, [dataEdit, setValue, trigger]);\n\n  return (\n    <FormContainer onSubmit={handleSubmit(onSubmit)}>\n      <Toast ref={toast} />\n      <h4>{isEditMode ? 'Editar respuesta rápida' : 'Crear respuesta rápida'}</h4>\n\n      <InputContainer>\n        <Label htmlFor=\"keyword\">Palabra clave:</Label>\n        <Input id=\"keyword\" {...register('keyword', { required: 'Este campo es obligatorio' })} />\n        {errors.keyword && <ErrorMessage>{errors.keyword.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"upsellImage\">Url Imagen:</Label>\n        <Input type=\"file\" id=\"upsellImage\" {...register('upsellImage', { required: 'Este campo es obligatorio' })} />\n        {errors.upsellImage && <ErrorMessage>{errors.upsellImage.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"upsellVideo\">Url Video:</Label>\n        <Input type=\"file\" id=\"upsellVideo\" {...register('upsellVideo', { required: 'Este campo es obligatorio' })}  />\n        {errors.upsellVideo && <ErrorMessage>{errors.upsellVideo.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"upsellText\">Texto:</Label>\n        <Controller \n          name=\"upsellText\"\n          control={control}\n          rules={{ required: 'Este campo es obligatorio' }}\n          render={({ field }) => (\n            <ScrollableQuill\n              {...field}\n              theme=\"snow\"\n              placeholder=\"Escribe el texto\"\n            />\n          )}\n        />\n        {errors.upsellText && <ErrorMessage>{errors.upsellText.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"upsellTextVideo\">Texto Video:</Label>\n        <Controller\n          name=\"upsellTextVideo\"\n          control={control}\n          rules={{ required: 'Este campo es obligatorio' }}\n          render={({ field }) => (\n            <ScrollableQuill\n              {...field}\n              theme=\"snow\"\n              placeholder=\"Escribe el texto del video\"\n            />\n          )}\n        />\n        {errors.upsellTextVideo && <ErrorMessage>{errors.upsellTextVideo.message}</ErrorMessage>}\n      </InputContainer>\n\n      <CheckboxContainer>\n        <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n          <Checkbox\n            inputId=\"isConfirmed\"\n            onChange={(e) => setisChecked(e.checked || false)}\n            checked={isChecked}\n            style={{ boxSizing: 'border-box', backgroundColor: 'white', border: '1px solid black', borderRadius: '1px', width: '20px', height: '24px' }}\n          />\n          <span style={{ marginLeft: '8px' }}>Confirmar pedido</span>\n        </label>\n\n        <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\n          <Checkbox\n            inputId=\"isInformative\"\n            onChange={(e) => setInformatived(e.checked || false)}\n            checked={isInformatived}\n            style={{ boxSizing: 'border-box', backgroundColor: 'white', border: '1px solid black', borderRadius: '1px', width: '20px', height: '24px' }}\n          />\n          <span style={{ marginLeft: '8px' }}>Informar pedido</span>\n        </label>\n      </CheckboxContainer>\n\n      <div id=\"submitButton\" style={{ position: 'relative' }}>\n        <SubmitButton type=\"submit\" disabled={!isValid}>\n          {isEditMode ? 'Guardar' : 'Crear respuesta'}\n        </SubmitButton>\n      </div>\n    </FormContainer>\n  );\n};\n\nexport default FormRespuesta;"
        }
    ]
}