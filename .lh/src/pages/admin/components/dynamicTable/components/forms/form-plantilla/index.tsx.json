{
    "sourceFile": "src/pages/admin/components/dynamicTable/components/forms/form-plantilla/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740154258025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740154265352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,9 @@\n import { Toast } from 'primereact/toast';\n import { RadioButton } from 'primereact/radiobutton';\n import { useTemplate } from '../../../../../../../services/template/template.service';\n \n-import { useChatContext } from 'pages/chat/context/chat';\n-\n+import { useChatContext } from '../../../../../../../pages/chat/context/chat';\n interface FormData {\n   text: string;\n   name: string;\n   code: string;\n"
                }
            ],
            "date": 1740154258025,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { Controller, useForm } from 'react-hook-form';\nimport { ConfirmPopup, confirmPopup } from 'primereact/confirmpopup';\nimport { Toast } from 'primereact/toast';\nimport { RadioButton } from 'primereact/radiobutton';\nimport { useTemplate } from '../../../../../../../services/template/template.service';\n\nimport { useChatContext } from 'pages/chat/context/chat';\n\ninterface FormData {\n  text: string;\n  name: string;\n  code: string;\n  templateType: string; \n}\n\nconst FormContainer = styled.form`\n  width: 100%;\n  max-width: 400px;\n  margin: 20px auto;\n  padding: 20px;\n  border-radius: 10px;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n\n  h4 {\n    font-size: 22px;\n    color: #2c303c;\n    font-weight: 600;\n    text-align: center;\n    padding-bottom: 10px;\n    margin-bottom: 20px;\n    border-bottom: 1px solid #e0e0e0;\n    span {\n      color: #7c8c9c;\n    }\n  }\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  font-size: 16px;\n  cursor: pointer;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 14px;\n\n  &:focus {\n    border-color: #007BFF;\n    outline: none;\n  }\n`;\n\nconst ErrorMessage = styled.p`\n  color: red;\n  font-size: 12px;\n`;\n\nconst SubmitButton = styled.button`\n  background-color: #2D2E83;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n\n  &:hover {\n    background-color: #3C58A4;\n  }\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst RadioGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  cursor: pointer;\n  font-size: 14px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n\n  > label {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n\n    > div > div {\n      width: 14px;\n      height: 14px;\n      margin: auto;\n      border: 1px solid black; /* Borde negro */\n\n      > div {\n        width: 8px;\n        height: 8px;\n      }\n    }\n  }\n`;\n\ninterface Props {\n  closeModal: () => void;\n  setLoaderService: (data: boolean) => void;\n  dataEdit: any;\n  id?: string;\n  isDeletingUser: boolean;\n}\n\nconst radioOptions = [\n    { label: 'Genérico', value: 'generic' },\n    { label: 'Agencia', value: 'agency' },\n    { label: 'Pago contra Entrega', value: 'cash_on_delivery' },\n];\n\nconst FormPlantilla: React.FC<Props> = ({\n  closeModal,\n  setLoaderService,\n  dataEdit,\n  id, \n  isDeletingUser,\n}) => {\n  const {\n    control,\n    trigger,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors, isValid },\n  } = useForm<FormData>({ mode: 'onChange' });\n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const toast = useRef<any>(null);\n  const { postTemplate, patchTemplate } = useTemplate();\n  const { setShowMessageDialog } = useChatContext();\n\n  useEffect(() => {\n    setShowMessageDialog(true)\n  }, [])\n\n  const confirmCreateUser = (data: FormData) => {\n    \n    if (isDeletingUser) return;\n\n    confirmPopup({\n      className: \"toast_custom\", \n      appendTo: document.getElementById('submitButton') as HTMLElement,\n      message: dataEdit?.action === 'edit' ? '¿Estás seguro de editar la plantilla?' : '¿Estás seguro de crear la plantilla?',\n      icon: 'pi pi-exclamation-triangle',\n      acceptLabel: 'SI',\n      rejectLabel: 'NO',\n      accept: () => accept(data),\n      reject: closeModal,\n    });\n  };\n\n  const onSubmit = (data: FormData) => {\n    confirmCreateUser(data)\n  };\n\n  const accept = async (data: FormData) => {\n    setLoaderService(true);\n    \n    try {\n      if (dataEdit?.action === 'edit') {\n        await patchTemplate({ ...data }, Number(dataEdit?.data?.id));\n      } else {\n        await postTemplate({ ...data, id: Number(id) });\n      }\n      closeModal();\n    } catch (error) {\n      toast.current.show({ severity: 'error', summary: 'Error', detail: 'Hubo un error', life: 3000 });\n    } finally {\n      setLoaderService(false);\n    }\n  };\n\n  useEffect(() => {\n    setValue('templateType', 'generic');\n  }, [])\n  \n\n  useEffect(() => {\n    if (dataEdit?.action === 'edit') {\n      setIsEditMode(true);\n      setValue('name', dataEdit.data.name);\n      setValue('code', dataEdit.data.code);\n      setValue('text', dataEdit.data.text);\n      setValue('templateType', dataEdit.data.templateType);\n      trigger();\n    }\n  }, [dataEdit, setValue, trigger]);\n\n  return (\n    <FormContainer onSubmit={handleSubmit(onSubmit)}>\n      <Toast ref={toast} />\n      <h4>{isEditMode ? 'Editar plantilla' : 'Crear plantilla'}</h4>\n\n      <InputContainer>\n        <Label htmlFor=\"name\">Nombre plantilla:</Label>\n        <Input id=\"name\" {...register('name', { required: 'Este campo es obligatorio' })} />\n        {errors.name && <ErrorMessage>{errors.name.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"code\">Cod. plantilla en meta:</Label>\n        <Input id=\"code\" {...register('code', { required: 'Este campo es obligatorio' })} />\n        {errors.code && <ErrorMessage>{errors.code.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label htmlFor=\"text\">Adicional:</Label>\n        <Textarea id=\"text\" {...register('text', { required: 'Este campo es obligatorio' })} />\n        {errors.text && <ErrorMessage>{errors.text.message}</ErrorMessage>}\n      </InputContainer>\n\n      <InputContainer>\n        <Label>Tipo de Plantilla:</Label>\n        <RadioGroup>\n          {radioOptions.map((option) => (\n            <label key={option.value}>\n              <Controller\n                name=\"templateType\"\n                control={control}\n                rules={{ required: 'Selecciona un tipo de plantilla.' }}\n                render={({ field }) => (\n                  <RadioButton\n                    style={{ cursor: 'pointer' }}\n                    inputId={option.value}\n                    {...field}\n                    value={option.value}\n                    checked={field.value === option.value}\n                  />\n                )}\n              />\n              {option.label}\n            </label>\n          ))}\n        </RadioGroup>\n        {errors.templateType && <ErrorMessage>{errors.templateType.message}</ErrorMessage>}\n      </InputContainer>\n\n      <div  id=\"submitButton\" style={{position: 'relative'}}>\n        <SubmitButton type=\"submit\" disabled={!isValid}>\n          {isEditMode ? 'Guardar' : 'Crear plantilla'}\n        </SubmitButton>\n      </div>\n\n    </FormContainer>\n  );\n};\n\nexport default FormPlantilla;\n"
        }
    ]
}