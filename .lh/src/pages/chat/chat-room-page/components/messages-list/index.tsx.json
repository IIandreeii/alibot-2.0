{
    "sourceFile": "src/pages/chat/chat-room-page/components/messages-list/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1740155777335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740155789082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"hooks/use-firebase\";\n+import { useFirebase } from \"../../hooks/use-firebase\";\n import { objectToArray } from \"utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n"
                },
                {
                    "date": 1740155801144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"../../hooks/use-firebase\";\n-import { objectToArray } from \"utils/object-to-array\";\n+import { useFirebase } from \"../../../../../hooks/use-firebase\";\n+import { objectToArray } from \"../../../../../utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n"
                },
                {
                    "date": 1740155809579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,331 @@\n+import { forwardRef, useEffect, useRef, useState } from \"react\";\n+import { useParams } from \"react-router-dom\";\n+import Icon from \"../../../../../common/components/icons\";\n+import { MessageChat } from \"./data/get-messages\";\n+import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n+import { es } from 'date-fns/locale';\n+\n+import {\n+  Container,\n+  DateCustom,\n+  DateWrapper,\n+  EncryptionMessage,\n+  MessageGroup,\n+} from \"./styles\";\n+import { useFirebase } from \"../../../../../hooks/use-firebase\";\n+import { objectToArray } from \"../../../../../utils/object-to-array\";\n+import { useChatContext } from \"../../../../../../pages/chat/context/chat\";\n+import SingleMessage from \"../single-message\";\n+\n+interface MessagesListProps {\n+  onMessagesLoaded: () => void;  \n+  searchTerm?: string;  \n+  filterInChat?: boolean;\n+}\n+\n+type Message = {\n+  content?: string;\n+  createdAt: string;\n+  currentMillis: number;\n+  from: string;\n+  id: string;\n+  isOpponent: boolean;\n+  status: string;\n+  text?: string;\n+  timestamp: string;\n+  to: string;\n+  type: string;\n+  errorData?: string;\n+  flagError?: boolean;\n+  statusUpdatedAt?: string;\n+};\n+\n+const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n+  ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n+    const { getFromDatabase, response } = useFirebase();\n+    const params = useParams();\n+    const { numberSelected, chatSelected, setChatSelected } = useChatContext();\n+    const selectedMessageRef = useRef<HTMLDivElement | null>(null);\n+    const [visibleMessages, setVisibleMessages] = useState<MessageChat[]>([]);\n+    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Message | any>({});\n+\n+    const [loadingMore, setLoadingMore] = useState(false);\n+    const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n+    const [messages, setMessages] = useState<MessageChat[]>([]);\n+    const [highlightedMessage, setHighlightedMessage] = useState<string | null>(null);\n+    const [mediaLoadingCount, setMediaLoadingCount] = useState(0); \n+    const [totalMediaCount, setTotalMediaCount] = useState(0); \n+    const [selectedBgColor, setSelectedBgColor] = useState<string>(\"\"); \n+\n+    useEffect(() => {\n+      getFromDatabase(`${numberSelected}/${params.id}/messages`);\n+    }, [params.id]);\n+\n+    useEffect(() => {\n+      const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n+    \n+      const parseDate = (dateString) => {\n+        const [date, time, period] = dateString.split(' ');\n+        const [day, month, year] = date.split('/');\n+        const [hours, minutes, seconds] = time.split(':');\n+        const hours12 = period === 'AM' \n+          ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n+          : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n+    \n+        // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n+        return new Date(year, month - 1, day, hours12, minutes, seconds);\n+      };\n+    \n+      const sortedMessages = listAll.sort((a, b) => {\n+        const dateA = parseDate(a.createdAt);\n+        const dateB = parseDate(b.createdAt);\n+    \n+        return filterInChat\n+          ? dateA.getTime() - dateB.getTime()\n+          : dateB.getTime() - dateA.getTime();\n+      });\n+\n+      const messages: Message[] = sortedMessages\n+\n+      const groupedMessages = messages.reduce((acc, message) => {\n+        // Extraer solo la fecha (ignorando la hora y minuto)\n+        const date = message.createdAt.split(' ')[0];  // Suponiendo el formato \"DD/MM/YYYY HH:MM:SS\"\n+        \n+        if (!acc[date]) {\n+          acc[date] = [];\n+        }\n+        acc[date].push(message);\n+        return acc;\n+      }, {} as Record<string, Message[]>);\n+\n+      setVisibleMessagesGroup(groupedMessages)\n+      \n+      setMessages(sortedMessages);\n+      setInitialLoadComplete(false);\n+    }, [response]);\n+    \n+\n+    const getRefCurrent = (ref: any): HTMLDivElement | null => {\n+      if (typeof ref === 'function') {\n+        return null;\n+      }\n+      return ref?.current || null;\n+    };\n+\n+    const loadMoreMessages = () => {\n+      if (loadingMore || visibleMessages.length >= messages.length) return;\n+      setLoadingMore(true);\n+\n+      const currentRef = getRefCurrent(ref);\n+      const prevScrollHeight = currentRef?.scrollHeight || 0;\n+\n+      const newMessages = messages.slice(\n+        Math.max(messages.length - visibleMessages.length - 10, 0),\n+        messages.length - visibleMessages.length\n+      );      \n+\n+      setVisibleMessages((prev) => [...newMessages, ...prev]);\n+\n+      setTimeout(() => {\n+        const newScrollHeight = currentRef?.scrollHeight || 0;\n+        const scrollDiff = newScrollHeight - prevScrollHeight;\n+\n+        if (currentRef) {\n+          currentRef.scrollTop = scrollDiff;\n+        }\n+\n+        setLoadingMore(false);\n+      }, 100);\n+    };\n+\n+    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n+      const currentScrollTop = e.currentTarget.scrollTop;\n+      if (currentScrollTop === 0) {\n+        loadMoreMessages(); \n+      }\n+    };\n+\n+    useEffect(() => {\n+      if (!chatSelected && !initialLoadComplete && messages.length > 0) {\n+       \n+        setVisibleMessages(filterInChat ? messages.slice(-10) : messages);\n+        setInitialLoadComplete(true);\n+\n+        setTimeout(() => {\n+          const currentRef = getRefCurrent(ref);\n+          if (currentRef) {\n+            currentRef.scrollTop = currentRef.scrollHeight; \n+          }\n+        }, 100);\n+      }\n+    }, [messages, initialLoadComplete, chatSelected]);\n+\n+    useEffect(() => {\n+      if (chatSelected) {\n+        const indexOfSelected = messages.findIndex((msg) => msg.id === chatSelected.id);\n+    \n+        if (indexOfSelected !== -1) {\n+          const selectedVisibleMessages = messages.slice(indexOfSelected, messages.length); \n+          setVisibleMessages(selectedVisibleMessages);\n+    \n+          setTimeout(() => {\n+            const currentRef = getRefCurrent(ref);\n+            if (selectedMessageRef.current && currentRef) {\n+              currentRef.scrollTop = selectedMessageRef.current.offsetTop - currentRef.clientHeight / 2;\n+              \n+              setSelectedBgColor(\"#c0cbb8\");\n+              setTimeout(() => {\n+                setSelectedBgColor(\"\"); \n+              }, 1000);\n+            }\n+          }, 500);\n+        }\n+      }\n+    }, [chatSelected, messages]);\n+\n+    useEffect(() => {\n+      if (searchTerm) {\n+        const foundMessage = messages.find((msg) =>\n+          msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())\n+        );\n+\n+        const foundMessageFilter = messages.filter((msg) =>\n+          (msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())) && \n+          (msg?.type === \"text\" || msg?.type === \"location\")\n+        )\n+\n+        \n+        if (foundMessage) {\n+          setHighlightedMessage(foundMessage.id);\n+          const indexOfFoundMessage = messages.findIndex(\n+            (msg) => msg.id === foundMessage.id\n+          );\n+\n+          if (filterInChat) {\n+            setVisibleMessages( messages.slice(Math.max(0, indexOfFoundMessage - 10), indexOfFoundMessage + 1));\n+          } else {\n+            setVisibleMessages(foundMessageFilter)\n+\n+          }\n+        \n+          setTimeout(() => {\n+            const currentRef = getRefCurrent(ref);\n+            if (currentRef) {\n+              currentRef.scrollTop = selectedMessageRef.current?.offsetTop || 0;\n+            }\n+          }, 100);\n+        }\n+      }\n+    }, [searchTerm, messages]);\n+    \n+\n+    useEffect(() => {\n+      if (mediaLoadingCount === totalMediaCount && totalMediaCount > 0) {\n+        setTimeout(() => {\n+          const currentRef = getRefCurrent(ref);\n+          if (currentRef) {\n+            currentRef.scrollTop = currentRef.scrollHeight; \n+          }\n+        }, 100);\n+      }\n+    }, [mediaLoadingCount, totalMediaCount]);\n+\n+    const handleMediaLoad = () => {\n+      setMediaLoadingCount((prev) => prev + 1);\n+    };\n+\n+    useEffect(() => {\n+      const mediaMessages = visibleMessages.filter(\n+        (msg) => msg.type === 'image' || msg.type === 'video' || msg.type === 'location'\n+      );\n+      setTotalMediaCount(mediaMessages.length);\n+    }, [visibleMessages]);\n+\n+    const onSelectedChat = (message: any) => {      \n+      message.phone = params.id\n+      setChatSelected(message)\n+    }\n+\n+    const formatMessageDate = (date: string) => {\n+      const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n+      let parsedDate: Date | null = null;\n+    \n+      for (const formatStr of formats) {\n+        parsedDate = parse(date, formatStr, new Date());\n+        if (!isNaN(parsedDate.getTime())) {\n+          break;\n+        }\n+      }\n+    \n+      if (parsedDate === null || isNaN(parsedDate.getTime())) {\n+        console.error(\"Fecha invÃ¡lida:\", date);\n+        return '';\n+      }\n+    \n+      if (isToday(parsedDate)) {\n+        return 'Hoy';\n+      }\n+    \n+      if (isYesterday(parsedDate)) {\n+        return 'Ayer';\n+      }\n+    \n+      const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n+    \n+      if (daysDifference <= 7) {\n+        // Si la fecha es dentro de la misma semana\n+        return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n+      }\n+    \n+      return format(parsedDate, 'd MMMM yyyy', { locale: es }); // Ejemplo: '11 de junio de 2024'\n+    };\n+\n+    return (\n+      <Container ref={ref} onScroll={handleScroll}>\n+        {\n+          filterInChat &&\n+          <>\n+            <EncryptionMessage>\n+              <Icon id=\"lock\" className=\"icon\" />\n+              Messages are end-to-end encrypted. No one outside of this chat, not even WhatsApp, can read or listen to them. Click to learn more.\n+            </EncryptionMessage>\n+          </>\n+        }\n+        <MessageGroup>\n+          {Object.entries(visibleMessagesGroup).map(([date, messages]: any) => (\n+          <div key={date}>\n+            <DateWrapper>\n+              <DateCustom>{formatMessageDate(date)}</DateCustom>\n+            </DateWrapper>\n+            <MessageGroup>\n+              {messages.map((message) => {\n+                const isSelected = message.id === chatSelected?.id;\n+                const isHighlighted = message.id === highlightedMessage;\n+                return (\n+                  <SingleMessage\n+                    key={message.id}\n+                    message={message}\n+                    ref={isSelected ? selectedMessageRef : null}\n+                    isHighlighted={isHighlighted}\n+                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n+                    onImageLoad={handleMediaLoad}\n+                    onVideoLoad={handleMediaLoad}\n+                    onAudioLoad={handleMediaLoad}\n+                    onStickerLoad={handleMediaLoad}\n+                    onMapLoad={handleMediaLoad}\n+                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n+                  />\n+                );\n+              })}\n+            </MessageGroup>\n+          </div>\n+        ))}\n+        </MessageGroup>\n+\n+        \n+      </Container>\n+    );\n+  }\n+);\n+\n+export default MessagesList;\n"
                },
                {
                    "date": 1740155820690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   MessageGroup,\n } from \"./styles\";\n import { useFirebase } from \"../../../../../hooks/use-firebase\";\n import { objectToArray } from \"../../../../../utils/object-to-array\";\n-import { useChatContext } from \"../../../../../../pages/chat/context/chat\";\n+import { useChatContext } from \"../../../\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n   onMessagesLoaded: () => void;  \n@@ -328,335 +328,4 @@\n   }\n );\n \n export default MessagesList;\n-import { forwardRef, useEffect, useRef, useState } from \"react\";\n-import { useParams } from \"react-router-dom\";\n-import Icon from \"../../../../../common/components/icons\";\n-import { MessageChat } from \"./data/get-messages\";\n-import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n-import { es } from 'date-fns/locale';\n-\n-import {\n-  Container,\n-  DateCustom,\n-  DateWrapper,\n-  EncryptionMessage,\n-  MessageGroup,\n-} from \"./styles\";\n-import { useFirebase } from \"../../../../../hooks/use-firebase\";\n-import { objectToArray } from \"../../../../../utils/object-to-array\";\n-import { useChatContext } from \"pages/chat/context/chat\";\n-import SingleMessage from \"../single-message\";\n-\n-interface MessagesListProps {\n-  onMessagesLoaded: () => void;  \n-  searchTerm?: string;  \n-  filterInChat?: boolean;\n-}\n-\n-type Message = {\n-  content?: string;\n-  createdAt: string;\n-  currentMillis: number;\n-  from: string;\n-  id: string;\n-  isOpponent: boolean;\n-  status: string;\n-  text?: string;\n-  timestamp: string;\n-  to: string;\n-  type: string;\n-  errorData?: string;\n-  flagError?: boolean;\n-  statusUpdatedAt?: string;\n-};\n-\n-const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n-  ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n-    const { getFromDatabase, response } = useFirebase();\n-    const params = useParams();\n-    const { numberSelected, chatSelected, setChatSelected } = useChatContext();\n-    const selectedMessageRef = useRef<HTMLDivElement | null>(null);\n-    const [visibleMessages, setVisibleMessages] = useState<MessageChat[]>([]);\n-    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Message | any>({});\n-\n-    const [loadingMore, setLoadingMore] = useState(false);\n-    const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n-    const [messages, setMessages] = useState<MessageChat[]>([]);\n-    const [highlightedMessage, setHighlightedMessage] = useState<string | null>(null);\n-    const [mediaLoadingCount, setMediaLoadingCount] = useState(0); \n-    const [totalMediaCount, setTotalMediaCount] = useState(0); \n-    const [selectedBgColor, setSelectedBgColor] = useState<string>(\"\"); \n-\n-    useEffect(() => {\n-      getFromDatabase(`${numberSelected}/${params.id}/messages`);\n-    }, [params.id]);\n-\n-    useEffect(() => {\n-      const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n-    \n-      const parseDate = (dateString) => {\n-        const [date, time, period] = dateString.split(' ');\n-        const [day, month, year] = date.split('/');\n-        const [hours, minutes, seconds] = time.split(':');\n-        const hours12 = period === 'AM' \n-          ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n-          : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n-    \n-        // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n-        return new Date(year, month - 1, day, hours12, minutes, seconds);\n-      };\n-    \n-      const sortedMessages = listAll.sort((a, b) => {\n-        const dateA = parseDate(a.createdAt);\n-        const dateB = parseDate(b.createdAt);\n-    \n-        return filterInChat\n-          ? dateA.getTime() - dateB.getTime()\n-          : dateB.getTime() - dateA.getTime();\n-      });\n-\n-      const messages: Message[] = sortedMessages\n-\n-      const groupedMessages = messages.reduce((acc, message) => {\n-        // Extraer solo la fecha (ignorando la hora y minuto)\n-        const date = message.createdAt.split(' ')[0];  // Suponiendo el formato \"DD/MM/YYYY HH:MM:SS\"\n-        \n-        if (!acc[date]) {\n-          acc[date] = [];\n-        }\n-        acc[date].push(message);\n-        return acc;\n-      }, {} as Record<string, Message[]>);\n-\n-      setVisibleMessagesGroup(groupedMessages)\n-      \n-      setMessages(sortedMessages);\n-      setInitialLoadComplete(false);\n-    }, [response]);\n-    \n-\n-    const getRefCurrent = (ref: any): HTMLDivElement | null => {\n-      if (typeof ref === 'function') {\n-        return null;\n-      }\n-      return ref?.current || null;\n-    };\n-\n-    const loadMoreMessages = () => {\n-      if (loadingMore || visibleMessages.length >= messages.length) return;\n-      setLoadingMore(true);\n-\n-      const currentRef = getRefCurrent(ref);\n-      const prevScrollHeight = currentRef?.scrollHeight || 0;\n-\n-      const newMessages = messages.slice(\n-        Math.max(messages.length - visibleMessages.length - 10, 0),\n-        messages.length - visibleMessages.length\n-      );      \n-\n-      setVisibleMessages((prev) => [...newMessages, ...prev]);\n-\n-      setTimeout(() => {\n-        const newScrollHeight = currentRef?.scrollHeight || 0;\n-        const scrollDiff = newScrollHeight - prevScrollHeight;\n-\n-        if (currentRef) {\n-          currentRef.scrollTop = scrollDiff;\n-        }\n-\n-        setLoadingMore(false);\n-      }, 100);\n-    };\n-\n-    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n-      const currentScrollTop = e.currentTarget.scrollTop;\n-      if (currentScrollTop === 0) {\n-        loadMoreMessages(); \n-      }\n-    };\n-\n-    useEffect(() => {\n-      if (!chatSelected && !initialLoadComplete && messages.length > 0) {\n-       \n-        setVisibleMessages(filterInChat ? messages.slice(-10) : messages);\n-        setInitialLoadComplete(true);\n-\n-        setTimeout(() => {\n-          const currentRef = getRefCurrent(ref);\n-          if (currentRef) {\n-            currentRef.scrollTop = currentRef.scrollHeight; \n-          }\n-        }, 100);\n-      }\n-    }, [messages, initialLoadComplete, chatSelected]);\n-\n-    useEffect(() => {\n-      if (chatSelected) {\n-        const indexOfSelected = messages.findIndex((msg) => msg.id === chatSelected.id);\n-    \n-        if (indexOfSelected !== -1) {\n-          const selectedVisibleMessages = messages.slice(indexOfSelected, messages.length); \n-          setVisibleMessages(selectedVisibleMessages);\n-    \n-          setTimeout(() => {\n-            const currentRef = getRefCurrent(ref);\n-            if (selectedMessageRef.current && currentRef) {\n-              currentRef.scrollTop = selectedMessageRef.current.offsetTop - currentRef.clientHeight / 2;\n-              \n-              setSelectedBgColor(\"#c0cbb8\");\n-              setTimeout(() => {\n-                setSelectedBgColor(\"\"); \n-              }, 1000);\n-            }\n-          }, 500);\n-        }\n-      }\n-    }, [chatSelected, messages]);\n-\n-    useEffect(() => {\n-      if (searchTerm) {\n-        const foundMessage = messages.find((msg) =>\n-          msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())\n-        );\n-\n-        const foundMessageFilter = messages.filter((msg) =>\n-          (msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())) && \n-          (msg?.type === \"text\" || msg?.type === \"location\")\n-        )\n-\n-        \n-        if (foundMessage) {\n-          setHighlightedMessage(foundMessage.id);\n-          const indexOfFoundMessage = messages.findIndex(\n-            (msg) => msg.id === foundMessage.id\n-          );\n-\n-          if (filterInChat) {\n-            setVisibleMessages( messages.slice(Math.max(0, indexOfFoundMessage - 10), indexOfFoundMessage + 1));\n-          } else {\n-            setVisibleMessages(foundMessageFilter)\n-\n-          }\n-        \n-          setTimeout(() => {\n-            const currentRef = getRefCurrent(ref);\n-            if (currentRef) {\n-              currentRef.scrollTop = selectedMessageRef.current?.offsetTop || 0;\n-            }\n-          }, 100);\n-        }\n-      }\n-    }, [searchTerm, messages]);\n-    \n-\n-    useEffect(() => {\n-      if (mediaLoadingCount === totalMediaCount && totalMediaCount > 0) {\n-        setTimeout(() => {\n-          const currentRef = getRefCurrent(ref);\n-          if (currentRef) {\n-            currentRef.scrollTop = currentRef.scrollHeight; \n-          }\n-        }, 100);\n-      }\n-    }, [mediaLoadingCount, totalMediaCount]);\n-\n-    const handleMediaLoad = () => {\n-      setMediaLoadingCount((prev) => prev + 1);\n-    };\n-\n-    useEffect(() => {\n-      const mediaMessages = visibleMessages.filter(\n-        (msg) => msg.type === 'image' || msg.type === 'video' || msg.type === 'location'\n-      );\n-      setTotalMediaCount(mediaMessages.length);\n-    }, [visibleMessages]);\n-\n-    const onSelectedChat = (message: any) => {      \n-      message.phone = params.id\n-      setChatSelected(message)\n-    }\n-\n-    const formatMessageDate = (date: string) => {\n-      const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n-      let parsedDate: Date | null = null;\n-    \n-      for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr, new Date());\n-        if (!isNaN(parsedDate.getTime())) {\n-          break;\n-        }\n-      }\n-    \n-      if (parsedDate === null || isNaN(parsedDate.getTime())) {\n-        console.error(\"Fecha invÃ¡lida:\", date);\n-        return '';\n-      }\n-    \n-      if (isToday(parsedDate)) {\n-        return 'Hoy';\n-      }\n-    \n-      if (isYesterday(parsedDate)) {\n-        return 'Ayer';\n-      }\n-    \n-      const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n-    \n-      if (daysDifference <= 7) {\n-        // Si la fecha es dentro de la misma semana\n-        return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n-      }\n-    \n-      return format(parsedDate, 'd MMMM yyyy', { locale: es }); // Ejemplo: '11 de junio de 2024'\n-    };\n-\n-    return (\n-      <Container ref={ref} onScroll={handleScroll}>\n-        {\n-          filterInChat &&\n-          <>\n-            <EncryptionMessage>\n-              <Icon id=\"lock\" className=\"icon\" />\n-              Messages are end-to-end encrypted. No one outside of this chat, not even WhatsApp, can read or listen to them. Click to learn more.\n-            </EncryptionMessage>\n-          </>\n-        }\n-        <MessageGroup>\n-          {Object.entries(visibleMessagesGroup).map(([date, messages]: any) => (\n-          <div key={date}>\n-            <DateWrapper>\n-              <DateCustom>{formatMessageDate(date)}</DateCustom>\n-            </DateWrapper>\n-            <MessageGroup>\n-              {messages.map((message) => {\n-                const isSelected = message.id === chatSelected?.id;\n-                const isHighlighted = message.id === highlightedMessage;\n-                return (\n-                  <SingleMessage\n-                    key={message.id}\n-                    message={message}\n-                    ref={isSelected ? selectedMessageRef : null}\n-                    isHighlighted={isHighlighted}\n-                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n-                    onImageLoad={handleMediaLoad}\n-                    onVideoLoad={handleMediaLoad}\n-                    onAudioLoad={handleMediaLoad}\n-                    onStickerLoad={handleMediaLoad}\n-                    onMapLoad={handleMediaLoad}\n-                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n-                  />\n-                );\n-              })}\n-            </MessageGroup>\n-          </div>\n-        ))}\n-        </MessageGroup>\n-\n-        \n-      </Container>\n-    );\n-  }\n-);\n-\n-export default MessagesList;\n"
                },
                {
                    "date": 1740155832754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   MessageGroup,\n } from \"./styles\";\n import { useFirebase } from \"../../../../../hooks/use-firebase\";\n import { objectToArray } from \"../../../../../utils/object-to-array\";\n-import { useChatContext } from \"../../../\";\n+import { useChatContext } from \"../../../../chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n   onMessagesLoaded: () => void;  \n"
                },
                {
                    "date": 1740155915960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,19 @@\n import { forwardRef, useEffect, useRef, useState } from \"react\";\n import { useParams } from \"react-router-dom\";\n-import Icon from \"../../../../../common/components/icons\";\n-import { MessageChat } from \"./data/get-messages\";\n+import Icon from \"../../../../common/components/icons\";\n+import type { MessageChat } from \"./data/get-messages\"; // Importa MessageChat como tipo\n import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n import { es } from 'date-fns/locale';\n-\n import {\n   Container,\n   DateCustom,\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"../../../../../hooks/use-firebase\";\n-import { objectToArray } from \"../../../../../utils/object-to-array\";\n+import { useFirebase } from \"../../../../admin/hooks/use-firebase\";\n+import { objectToArray } from \"../../../../utils/object-to-array\";\n import { useChatContext } from \"../../../../chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n@@ -23,32 +22,39 @@\n   filterInChat?: boolean;\n }\n \n type Message = {\n-  content?: string;\n+  content: string; // Cambiado a obligatorio\n   createdAt: string;\n   currentMillis: number;\n   from: string;\n   id: string;\n   isOpponent: boolean;\n   status: string;\n-  text?: string;\n+  text: string; // Cambiado a obligatorio\n   timestamp: string;\n   to: string;\n   type: string;\n   errorData?: string;\n   flagError?: boolean;\n   statusUpdatedAt?: string;\n-};\n+  urlAudio: string; // Cambiado a obligatorio\n+  contact: string; // Cambiado a obligatorio\n+  urlImage: string; // Cambiado a obligatorio\n+  urlVideo: string; // Cambiado a obligatorio\n+  sticker?: string;\n+  latitude: string; // Cambiado a string\n+  longitude: string; // Cambiado a string\n+}\n \n const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n   ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n     const { getFromDatabase, response } = useFirebase();\n     const params = useParams();\n     const { numberSelected, chatSelected, setChatSelected } = useChatContext();\n     const selectedMessageRef = useRef<HTMLDivElement | null>(null);\n     const [visibleMessages, setVisibleMessages] = useState<MessageChat[]>([]);\n-    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Message | any>({});\n+    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Record<string, Message[]>>({});\n \n     const [loadingMore, setLoadingMore] = useState(false);\n     const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n     const [messages, setMessages] = useState<MessageChat[]>([]);\n@@ -63,18 +69,18 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      const parseDate = (dateString) => {\n+      const parseDate = (dateString: string): Date => {\n         const [date, time, period] = dateString.split(' ');\n         const [day, month, year] = date.split('/');\n         const [hours, minutes, seconds] = time.split(':');\n         const hours12 = period === 'AM' \n           ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n           : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n-    \n+        \n         // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n-        return new Date(year, month - 1, day, hours12, minutes, seconds);\n+        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), hours12, parseInt(minutes), parseInt(seconds));\n       };\n     \n       const sortedMessages = listAll.sort((a, b) => {\n         const dateA = parseDate(a.createdAt);\n@@ -84,9 +90,16 @@\n           ? dateA.getTime() - dateB.getTime()\n           : dateB.getTime() - dateA.getTime();\n       });\n \n-      const messages: Message[] = sortedMessages\n+      const messages: Message[] = sortedMessages.map((msg) => ({\n+        ...msg,\n+        latitude: msg.latitude ? msg.latitude.toString() : \"\", // Convertir a string\n+        longitude: msg.longitude ? msg.longitude.toString() : \"\", // Convertir a string\n+        urlImage: msg.urlImage || \"\", // Asegurarse de que urlImage no sea undefined\n+        urlVideo: msg.urlVideo || \"\", // Asegurarse de que urlVideo no sea undefined\n+        text: msg.text || \"\", // Asegurarse de que text no sea undefined\n+      }));\n \n       const groupedMessages = messages.reduce((acc, message) => {\n         // Extraer solo la fecha (ignorando la hora y minuto)\n         const date = message.createdAt.split(' ')[0];  // Suponiendo el formato \"DD/MM/YYYY HH:MM:SS\"\n@@ -297,27 +310,27 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-              {messages.map((message) => {\n+                {messages.map((message: Message) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n-                    key={message.id}\n-                    message={message}\n-                    ref={isSelected ? selectedMessageRef : null}\n-                    isHighlighted={isHighlighted}\n-                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n-                    onImageLoad={handleMediaLoad}\n-                    onVideoLoad={handleMediaLoad}\n-                    onAudioLoad={handleMediaLoad}\n-                    onStickerLoad={handleMediaLoad}\n-                    onMapLoad={handleMediaLoad}\n-                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n+                  key={message.id}\n+                  message={message}\n+                  ref={isSelected ? selectedMessageRef : null}\n+                  isHighlighted={isHighlighted}\n+                  backgroundColor={isSelected ? selectedBgColor : \"\"} \n+                  onImageLoad={handleMediaLoad}\n+                  onVideoLoad={handleMediaLoad}\n+                  onAudioLoad={handleMediaLoad}\n+                  onStickerLoad={handleMediaLoad}\n+                  onMapLoad={handleMediaLoad}\n+                  onClick={() => filterInChat ? {} : onSelectedChat(message)}\n                   />\n                 );\n-              })}\n+                })}\n             </MessageGroup>\n           </div>\n         ))}\n         </MessageGroup>\n@@ -327,5 +340,5 @@\n     );\n   }\n );\n \n-export default MessagesList;\n+export default MessagesList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740155926104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,20 @@\n import { forwardRef, useEffect, useRef, useState } from \"react\";\n import { useParams } from \"react-router-dom\";\n-import Icon from \"../../../../common/components/icons\";\n-import type { MessageChat } from \"./data/get-messages\"; // Importa MessageChat como tipo\n+import Icon from \"../../../../../common/components/icons\";\n+import { MessageChat } from \"./data/get-messages\";\n import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n import { es } from 'date-fns/locale';\n+\n import {\n   Container,\n   DateCustom,\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"../../../../admin/hooks/use-firebase\";\n-import { objectToArray } from \"../../../../utils/object-to-array\";\n+import { useFirebase } from \"../../../../../hooks/use-firebase\";\n+import { objectToArray } from \"../../../../../utils/object-to-array\";\n import { useChatContext } from \"../../../../chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n@@ -22,39 +23,32 @@\n   filterInChat?: boolean;\n }\n \n type Message = {\n-  content: string; // Cambiado a obligatorio\n+  content?: string;\n   createdAt: string;\n   currentMillis: number;\n   from: string;\n   id: string;\n   isOpponent: boolean;\n   status: string;\n-  text: string; // Cambiado a obligatorio\n+  text?: string;\n   timestamp: string;\n   to: string;\n   type: string;\n   errorData?: string;\n   flagError?: boolean;\n   statusUpdatedAt?: string;\n-  urlAudio: string; // Cambiado a obligatorio\n-  contact: string; // Cambiado a obligatorio\n-  urlImage: string; // Cambiado a obligatorio\n-  urlVideo: string; // Cambiado a obligatorio\n-  sticker?: string;\n-  latitude: string; // Cambiado a string\n-  longitude: string; // Cambiado a string\n-}\n+};\n \n const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n   ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n     const { getFromDatabase, response } = useFirebase();\n     const params = useParams();\n     const { numberSelected, chatSelected, setChatSelected } = useChatContext();\n     const selectedMessageRef = useRef<HTMLDivElement | null>(null);\n     const [visibleMessages, setVisibleMessages] = useState<MessageChat[]>([]);\n-    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Record<string, Message[]>>({});\n+    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Message | any>({});\n \n     const [loadingMore, setLoadingMore] = useState(false);\n     const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n     const [messages, setMessages] = useState<MessageChat[]>([]);\n@@ -69,18 +63,18 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      const parseDate = (dateString: string): Date => {\n+      const parseDate = (dateString) => {\n         const [date, time, period] = dateString.split(' ');\n         const [day, month, year] = date.split('/');\n         const [hours, minutes, seconds] = time.split(':');\n         const hours12 = period === 'AM' \n           ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n           : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n-        \n+    \n         // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n-        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), hours12, parseInt(minutes), parseInt(seconds));\n+        return new Date(year, month - 1, day, hours12, minutes, seconds);\n       };\n     \n       const sortedMessages = listAll.sort((a, b) => {\n         const dateA = parseDate(a.createdAt);\n@@ -90,16 +84,9 @@\n           ? dateA.getTime() - dateB.getTime()\n           : dateB.getTime() - dateA.getTime();\n       });\n \n-      const messages: Message[] = sortedMessages.map((msg) => ({\n-        ...msg,\n-        latitude: msg.latitude ? msg.latitude.toString() : \"\", // Convertir a string\n-        longitude: msg.longitude ? msg.longitude.toString() : \"\", // Convertir a string\n-        urlImage: msg.urlImage || \"\", // Asegurarse de que urlImage no sea undefined\n-        urlVideo: msg.urlVideo || \"\", // Asegurarse de que urlVideo no sea undefined\n-        text: msg.text || \"\", // Asegurarse de que text no sea undefined\n-      }));\n+      const messages: Message[] = sortedMessages\n \n       const groupedMessages = messages.reduce((acc, message) => {\n         // Extraer solo la fecha (ignorando la hora y minuto)\n         const date = message.createdAt.split(' ')[0];  // Suponiendo el formato \"DD/MM/YYYY HH:MM:SS\"\n@@ -310,27 +297,27 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-                {messages.map((message: Message) => {\n+              {messages.map((message) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n-                  key={message.id}\n-                  message={message}\n-                  ref={isSelected ? selectedMessageRef : null}\n-                  isHighlighted={isHighlighted}\n-                  backgroundColor={isSelected ? selectedBgColor : \"\"} \n-                  onImageLoad={handleMediaLoad}\n-                  onVideoLoad={handleMediaLoad}\n-                  onAudioLoad={handleMediaLoad}\n-                  onStickerLoad={handleMediaLoad}\n-                  onMapLoad={handleMediaLoad}\n-                  onClick={() => filterInChat ? {} : onSelectedChat(message)}\n+                    key={message.id}\n+                    message={message}\n+                    ref={isSelected ? selectedMessageRef : null}\n+                    isHighlighted={isHighlighted}\n+                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n+                    onImageLoad={handleMediaLoad}\n+                    onVideoLoad={handleMediaLoad}\n+                    onAudioLoad={handleMediaLoad}\n+                    onStickerLoad={handleMediaLoad}\n+                    onMapLoad={handleMediaLoad}\n+                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n                   />\n                 );\n-                })}\n+              })}\n             </MessageGroup>\n           </div>\n         ))}\n         </MessageGroup>\n@@ -340,5 +327,5 @@\n     );\n   }\n );\n \n-export default MessagesList;\n\\ No newline at end of file\n+export default MessagesList;\n"
                },
                {
                    "date": 1740155934264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,27 +297,27 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-              {messages.map((message) => {\n+                {messages.map((message: Message) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n-                    key={message.id}\n-                    message={message}\n-                    ref={isSelected ? selectedMessageRef : null}\n-                    isHighlighted={isHighlighted}\n-                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n-                    onImageLoad={handleMediaLoad}\n-                    onVideoLoad={handleMediaLoad}\n-                    onAudioLoad={handleMediaLoad}\n-                    onStickerLoad={handleMediaLoad}\n-                    onMapLoad={handleMediaLoad}\n-                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n+                  key={message.id}\n+                  message={message}\n+                  ref={isSelected ? selectedMessageRef : null}\n+                  isHighlighted={isHighlighted}\n+                  backgroundColor={isSelected ? selectedBgColor : \"\"} \n+                  onImageLoad={handleMediaLoad}\n+                  onVideoLoad={handleMediaLoad}\n+                  onAudioLoad={handleMediaLoad}\n+                  onStickerLoad={handleMediaLoad}\n+                  onMapLoad={handleMediaLoad}\n+                  onClick={() => filterInChat ? {} : onSelectedChat(message)}\n                   />\n                 );\n-              })}\n+                })}\n             </MessageGroup>\n           </div>\n         ))}\n         </MessageGroup>\n"
                },
                {
                    "date": 1740155946433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,13 @@\n   type: string;\n   errorData?: string;\n   flagError?: boolean;\n   statusUpdatedAt?: string;\n+  urlAudio?: string;\n+  contact?: string;\n+  urlImage?: string;\n+  urlVideo?: string;\n+  urlSticker?: string;\n };\n \n const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n   ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n"
                },
                {
                    "date": 1740155963404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,18 +68,24 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      const parseDate = (dateString) => {\n-        const [date, time, period] = dateString.split(' ');\n-        const [day, month, year] = date.split('/');\n-        const [hours, minutes, seconds] = time.split(':');\n-        const hours12 = period === 'AM' \n+      interface ParsedDate {\n+        date: string;\n+        time: string;\n+        period: string;\n+      }\n+\n+      const parseDate = (dateString: string): Date => {\n+        const [date, time, period]: ParsedDate = dateString.split(' ') as unknown as ParsedDate;\n+        const [day, month, year]: string[] = date.split('/');\n+        const [hours, minutes, seconds]: string[] = time.split(':');\n+        const hours12: number = period === 'AM' \n           ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n           : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n-    \n+        \n         // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n-        return new Date(year, month - 1, day, hours12, minutes, seconds);\n+        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), hours12, parseInt(minutes), parseInt(seconds));\n       };\n     \n       const sortedMessages = listAll.sort((a, b) => {\n         const dateA = parseDate(a.createdAt);\n"
                },
                {
                    "date": 1740155974730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         period: string;\n       }\n \n       const parseDate = (dateString: string): Date => {\n-        const [date, time, period]: ParsedDate = dateString.split(' ') as unknown as ParsedDate;\n+        const [date, time, period] = dateString.split(' ');\n         const [day, month, year]: string[] = date.split('/');\n         const [hours, minutes, seconds]: string[] = time.split(':');\n         const hours12: number = period === 'AM' \n           ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n"
                },
                {
                    "date": 1740155990640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr, new Date());\n+        parsedDate = parse(date, formatStr);\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n"
                },
                {
                    "date": 1740156004368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr);\n+        parsedDate = parse(date, formatStr, new Date());\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n"
                },
                {
                    "date": 1740156013290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr, new Date());\n+        parsedDate = parse(date, formatStr, new Date(), { locale: es });\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n"
                },
                {
                    "date": 1740156023029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr, new Date(), { locale: es });\n+        parsedDate = parse(date, formatStr, new Date());\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n"
                },
                {
                    "date": 1740156035566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr, new Date());\n+        parsedDate = parse(date, formatStr);\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n"
                },
                {
                    "date": 1740156042988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { forwardRef, useEffect, useRef, useState } from \"react\";\n import { useParams } from \"react-router-dom\";\n-import Icon from \"../../../../../common/components/icons\";\n+import Icon from \".common/components/icons\";\n import { MessageChat } from \"./data/get-messages\";\n import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n import { es } from 'date-fns/locale';\n \n@@ -11,11 +11,11 @@\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"../../../../../hooks/use-firebase\";\n-import { objectToArray } from \"../../../../../utils/object-to-array\";\n-import { useChatContext } from \"../../../../chat/context/chat\";\n+import { useFirebase } from \"hooks/use-firebase\";\n+import { objectToArray } from \"utils/object-to-array\";\n+import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n   onMessagesLoaded: () => void;  \n@@ -37,13 +37,8 @@\n   type: string;\n   errorData?: string;\n   flagError?: boolean;\n   statusUpdatedAt?: string;\n-  urlAudio?: string;\n-  contact?: string;\n-  urlImage?: string;\n-  urlVideo?: string;\n-  urlSticker?: string;\n };\n \n const MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n   ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n@@ -68,24 +63,18 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      interface ParsedDate {\n-        date: string;\n-        time: string;\n-        period: string;\n-      }\n-\n-      const parseDate = (dateString: string): Date => {\n+      const parseDate = (dateString) => {\n         const [date, time, period] = dateString.split(' ');\n-        const [day, month, year]: string[] = date.split('/');\n-        const [hours, minutes, seconds]: string[] = time.split(':');\n-        const hours12: number = period === 'AM' \n+        const [day, month, year] = date.split('/');\n+        const [hours, minutes, seconds] = time.split(':');\n+        const hours12 = period === 'AM' \n           ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n           : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n-        \n+    \n         // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n-        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), hours12, parseInt(minutes), parseInt(seconds));\n+        return new Date(year, month - 1, day, hours12, minutes, seconds);\n       };\n     \n       const sortedMessages = listAll.sort((a, b) => {\n         const dateA = parseDate(a.createdAt);\n@@ -261,9 +250,9 @@\n       const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n       let parsedDate: Date | null = null;\n     \n       for (const formatStr of formats) {\n-        parsedDate = parse(date, formatStr);\n+        parsedDate = parse(date, formatStr, new Date());\n         if (!isNaN(parsedDate.getTime())) {\n           break;\n         }\n       }\n@@ -308,27 +297,27 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-                {messages.map((message: Message) => {\n+              {messages.map((message) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n-                  key={message.id}\n-                  message={message}\n-                  ref={isSelected ? selectedMessageRef : null}\n-                  isHighlighted={isHighlighted}\n-                  backgroundColor={isSelected ? selectedBgColor : \"\"} \n-                  onImageLoad={handleMediaLoad}\n-                  onVideoLoad={handleMediaLoad}\n-                  onAudioLoad={handleMediaLoad}\n-                  onStickerLoad={handleMediaLoad}\n-                  onMapLoad={handleMediaLoad}\n-                  onClick={() => filterInChat ? {} : onSelectedChat(message)}\n+                    key={message.id}\n+                    message={message}\n+                    ref={isSelected ? selectedMessageRef : null}\n+                    isHighlighted={isHighlighted}\n+                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n+                    onImageLoad={handleMediaLoad}\n+                    onVideoLoad={handleMediaLoad}\n+                    onAudioLoad={handleMediaLoad}\n+                    onStickerLoad={handleMediaLoad}\n+                    onMapLoad={handleMediaLoad}\n+                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n                   />\n                 );\n-                })}\n+              })}\n             </MessageGroup>\n           </div>\n         ))}\n         </MessageGroup>\n"
                },
                {
                    "date": 1740156059432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { forwardRef, useEffect, useRef, useState } from \"react\";\n import { useParams } from \"react-router-dom\";\n-import Icon from \".common/components/icons\";\n+import Icon from \"../../../../../common/components/icons\";\n import { MessageChat } from \"./data/get-messages\";\n import { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\n import { es } from 'date-fns/locale';\n \n"
                },
                {
                    "date": 1740156066432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"hooks/use-firebase\";\n+import { useFirebase } from \"../../../hooks/use-firebase\";\n import { objectToArray } from \"utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n"
                },
                {
                    "date": 1740156072641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n   DateWrapper,\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n-import { useFirebase } from \"../../../hooks/use-firebase\";\n-import { objectToArray } from \"utils/object-to-array\";\n+import { useFirebase } from \"../../../../../hooks/use-firebase\";\n+import { objectToArray } from \"../utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n"
                },
                {
                    "date": 1740156078537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n import { useFirebase } from \"../../../../../hooks/use-firebase\";\n-import { objectToArray } from \"../utils/object-to-array\";\n+import { objectToArray } from \"../../../../utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n"
                },
                {
                    "date": 1740156092875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   EncryptionMessage,\n   MessageGroup,\n } from \"./styles\";\n import { useFirebase } from \"../../../../../hooks/use-firebase\";\n-import { objectToArray } from \"../../../../utils/object-to-array\";\n+import { objectToArray } from \"../../../../../utils/object-to-array\";\n import { useChatContext } from \"pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n"
                },
                {
                    "date": 1740156100727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   MessageGroup,\n } from \"./styles\";\n import { useFirebase } from \"../../../../../hooks/use-firebase\";\n import { objectToArray } from \"../../../../../utils/object-to-array\";\n-import { useChatContext } from \"pages/chat/context/chat\";\n+import { useChatContext } from \"../../../../../pages/chat/context/chat\";\n import SingleMessage from \"../single-message\";\n \n interface MessagesListProps {\n   onMessagesLoaded: () => void;  \n"
                },
                {
                    "date": 1740156113727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      const parseDate = (dateString) => {\n+      const parseDate = (type dateString) => {\n         const [date, time, period] = dateString.split(' ');\n         const [day, month, year] = date.split('/');\n         const [hours, minutes, seconds] = time.split(':');\n         const hours12 = period === 'AM' \n"
                },
                {
                    "date": 1740156148565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     useEffect(() => {\n       const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n     \n-      const parseDate = (type dateString) => {\n+      const parseDate = (dateString) => {\n         const [date, time, period] = dateString.split(' ');\n         const [day, month, year] = date.split('/');\n         const [hours, minutes, seconds] = time.split(':');\n         const hours12 = period === 'AM' \n@@ -276,9 +276,9 @@\n         // Si la fecha es dentro de la misma semana\n         return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n       }\n     \n-      return format(parsedDate, 'd MMMM yyyy', { locale: es }); // Ejemplo: '11 de junio de 2024'\n+      return format(parsedDate, 'd MMMM yyyy'); // Ejemplo: '11 de junio de 2024'\n     };\n \n     return (\n       <Container ref={ref} onScroll={handleScroll}>\n"
                },
                {
                    "date": 1740156158078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n       const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n     \n       if (daysDifference <= 7) {\n         // Si la fecha es dentro de la misma semana\n-        return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n+        return format(parsedDate, 'EEEE',);  // Ejemplo: 'lunes', 'martes'\n       }\n     \n       return format(parsedDate, 'd MMMM yyyy'); // Ejemplo: '11 de junio de 2024'\n     };\n"
                },
                {
                    "date": 1740156172856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n       const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n     \n       if (daysDifference <= 7) {\n         // Si la fecha es dentro de la misma semana\n-        return format(parsedDate, 'EEEE',);  // Ejemplo: 'lunes', 'martes'\n+        return format(parsedDate, 'EEEE');  // Ejemplo: 'lunes', 'martes'\n       }\n     \n       return format(parsedDate, 'd MMMM yyyy'); // Ejemplo: '11 de junio de 2024'\n     };\n@@ -297,9 +297,9 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-              {messages.map((message) => {\n+              {messages.map((typemessage) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n"
                },
                {
                    "date": 1740156183108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,12 +273,12 @@\n       const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n     \n       if (daysDifference <= 7) {\n         // Si la fecha es dentro de la misma semana\n-        return format(parsedDate, 'EEEE');  // Ejemplo: 'lunes', 'martes'\n+        return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n       }\n     \n-      return format(parsedDate, 'd MMMM yyyy'); // Ejemplo: '11 de junio de 2024'\n+      return format(parsedDate, 'd MMMM yyyy', { locale: es }); // Ejemplo: '11 de junio de 2024'\n     };\n \n     return (\n       <Container ref={ref} onScroll={handleScroll}>\n@@ -297,9 +297,9 @@\n             <DateWrapper>\n               <DateCustom>{formatMessageDate(date)}</DateCustom>\n             </DateWrapper>\n             <MessageGroup>\n-              {messages.map((typemessage) => {\n+              {messages.map((message) => {\n                 const isSelected = message.id === chatSelected?.id;\n                 const isHighlighted = message.id === highlightedMessage;\n                 return (\n                   <SingleMessage\n"
                }
            ],
            "date": 1740155777335,
            "name": "Commit-0",
            "content": "import { forwardRef, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Icon from \"../../../../../common/components/icons\";\nimport { MessageChat } from \"./data/get-messages\";\nimport { format, isToday, isYesterday, parse, differenceInCalendarDays } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\nimport {\n  Container,\n  DateCustom,\n  DateWrapper,\n  EncryptionMessage,\n  MessageGroup,\n} from \"./styles\";\nimport { useFirebase } from \"hooks/use-firebase\";\nimport { objectToArray } from \"utils/object-to-array\";\nimport { useChatContext } from \"pages/chat/context/chat\";\nimport SingleMessage from \"../single-message\";\n\ninterface MessagesListProps {\n  onMessagesLoaded: () => void;  \n  searchTerm?: string;  \n  filterInChat?: boolean;\n}\n\ntype Message = {\n  content?: string;\n  createdAt: string;\n  currentMillis: number;\n  from: string;\n  id: string;\n  isOpponent: boolean;\n  status: string;\n  text?: string;\n  timestamp: string;\n  to: string;\n  type: string;\n  errorData?: string;\n  flagError?: boolean;\n  statusUpdatedAt?: string;\n};\n\nconst MessagesList = forwardRef<HTMLDivElement, MessagesListProps>(\n  ({ onMessagesLoaded, filterInChat = true, searchTerm }, ref) => {\n    const { getFromDatabase, response } = useFirebase();\n    const params = useParams();\n    const { numberSelected, chatSelected, setChatSelected } = useChatContext();\n    const selectedMessageRef = useRef<HTMLDivElement | null>(null);\n    const [visibleMessages, setVisibleMessages] = useState<MessageChat[]>([]);\n    const [visibleMessagesGroup, setVisibleMessagesGroup] = useState<Message | any>({});\n\n    const [loadingMore, setLoadingMore] = useState(false);\n    const [initialLoadComplete, setInitialLoadComplete] = useState(false);\n    const [messages, setMessages] = useState<MessageChat[]>([]);\n    const [highlightedMessage, setHighlightedMessage] = useState<string | null>(null);\n    const [mediaLoadingCount, setMediaLoadingCount] = useState(0); \n    const [totalMediaCount, setTotalMediaCount] = useState(0); \n    const [selectedBgColor, setSelectedBgColor] = useState<string>(\"\"); \n\n    useEffect(() => {\n      getFromDatabase(`${numberSelected}/${params.id}/messages`);\n    }, [params.id]);\n\n    useEffect(() => {\n      const listAll: MessageChat[] = objectToArray<MessageChat>(response);      \n    \n      const parseDate = (dateString) => {\n        const [date, time, period] = dateString.split(' ');\n        const [day, month, year] = date.split('/');\n        const [hours, minutes, seconds] = time.split(':');\n        const hours12 = period === 'AM' \n          ? (parseInt(hours) === 12 ? 0 : parseInt(hours)) // Convertir 12 AM a 0\n          : (parseInt(hours) === 12 ? 12 : parseInt(hours) + 12); // Convertir PM a 24 horas\n    \n        // Crear un nuevo objeto Date en formato adecuado para comparaciÃ³n\n        return new Date(year, month - 1, day, hours12, minutes, seconds);\n      };\n    \n      const sortedMessages = listAll.sort((a, b) => {\n        const dateA = parseDate(a.createdAt);\n        const dateB = parseDate(b.createdAt);\n    \n        return filterInChat\n          ? dateA.getTime() - dateB.getTime()\n          : dateB.getTime() - dateA.getTime();\n      });\n\n      const messages: Message[] = sortedMessages\n\n      const groupedMessages = messages.reduce((acc, message) => {\n        // Extraer solo la fecha (ignorando la hora y minuto)\n        const date = message.createdAt.split(' ')[0];  // Suponiendo el formato \"DD/MM/YYYY HH:MM:SS\"\n        \n        if (!acc[date]) {\n          acc[date] = [];\n        }\n        acc[date].push(message);\n        return acc;\n      }, {} as Record<string, Message[]>);\n\n      setVisibleMessagesGroup(groupedMessages)\n      \n      setMessages(sortedMessages);\n      setInitialLoadComplete(false);\n    }, [response]);\n    \n\n    const getRefCurrent = (ref: any): HTMLDivElement | null => {\n      if (typeof ref === 'function') {\n        return null;\n      }\n      return ref?.current || null;\n    };\n\n    const loadMoreMessages = () => {\n      if (loadingMore || visibleMessages.length >= messages.length) return;\n      setLoadingMore(true);\n\n      const currentRef = getRefCurrent(ref);\n      const prevScrollHeight = currentRef?.scrollHeight || 0;\n\n      const newMessages = messages.slice(\n        Math.max(messages.length - visibleMessages.length - 10, 0),\n        messages.length - visibleMessages.length\n      );      \n\n      setVisibleMessages((prev) => [...newMessages, ...prev]);\n\n      setTimeout(() => {\n        const newScrollHeight = currentRef?.scrollHeight || 0;\n        const scrollDiff = newScrollHeight - prevScrollHeight;\n\n        if (currentRef) {\n          currentRef.scrollTop = scrollDiff;\n        }\n\n        setLoadingMore(false);\n      }, 100);\n    };\n\n    const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n      const currentScrollTop = e.currentTarget.scrollTop;\n      if (currentScrollTop === 0) {\n        loadMoreMessages(); \n      }\n    };\n\n    useEffect(() => {\n      if (!chatSelected && !initialLoadComplete && messages.length > 0) {\n       \n        setVisibleMessages(filterInChat ? messages.slice(-10) : messages);\n        setInitialLoadComplete(true);\n\n        setTimeout(() => {\n          const currentRef = getRefCurrent(ref);\n          if (currentRef) {\n            currentRef.scrollTop = currentRef.scrollHeight; \n          }\n        }, 100);\n      }\n    }, [messages, initialLoadComplete, chatSelected]);\n\n    useEffect(() => {\n      if (chatSelected) {\n        const indexOfSelected = messages.findIndex((msg) => msg.id === chatSelected.id);\n    \n        if (indexOfSelected !== -1) {\n          const selectedVisibleMessages = messages.slice(indexOfSelected, messages.length); \n          setVisibleMessages(selectedVisibleMessages);\n    \n          setTimeout(() => {\n            const currentRef = getRefCurrent(ref);\n            if (selectedMessageRef.current && currentRef) {\n              currentRef.scrollTop = selectedMessageRef.current.offsetTop - currentRef.clientHeight / 2;\n              \n              setSelectedBgColor(\"#c0cbb8\");\n              setTimeout(() => {\n                setSelectedBgColor(\"\"); \n              }, 1000);\n            }\n          }, 500);\n        }\n      }\n    }, [chatSelected, messages]);\n\n    useEffect(() => {\n      if (searchTerm) {\n        const foundMessage = messages.find((msg) =>\n          msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n\n        const foundMessageFilter = messages.filter((msg) =>\n          (msg.content?.toLowerCase().includes(searchTerm.toLowerCase()) || msg.text?.toLowerCase().includes(searchTerm.toLowerCase())) && \n          (msg?.type === \"text\" || msg?.type === \"location\")\n        )\n\n        \n        if (foundMessage) {\n          setHighlightedMessage(foundMessage.id);\n          const indexOfFoundMessage = messages.findIndex(\n            (msg) => msg.id === foundMessage.id\n          );\n\n          if (filterInChat) {\n            setVisibleMessages( messages.slice(Math.max(0, indexOfFoundMessage - 10), indexOfFoundMessage + 1));\n          } else {\n            setVisibleMessages(foundMessageFilter)\n\n          }\n        \n          setTimeout(() => {\n            const currentRef = getRefCurrent(ref);\n            if (currentRef) {\n              currentRef.scrollTop = selectedMessageRef.current?.offsetTop || 0;\n            }\n          }, 100);\n        }\n      }\n    }, [searchTerm, messages]);\n    \n\n    useEffect(() => {\n      if (mediaLoadingCount === totalMediaCount && totalMediaCount > 0) {\n        setTimeout(() => {\n          const currentRef = getRefCurrent(ref);\n          if (currentRef) {\n            currentRef.scrollTop = currentRef.scrollHeight; \n          }\n        }, 100);\n      }\n    }, [mediaLoadingCount, totalMediaCount]);\n\n    const handleMediaLoad = () => {\n      setMediaLoadingCount((prev) => prev + 1);\n    };\n\n    useEffect(() => {\n      const mediaMessages = visibleMessages.filter(\n        (msg) => msg.type === 'image' || msg.type === 'video' || msg.type === 'location'\n      );\n      setTotalMediaCount(mediaMessages.length);\n    }, [visibleMessages]);\n\n    const onSelectedChat = (message: any) => {      \n      message.phone = params.id\n      setChatSelected(message)\n    }\n\n    const formatMessageDate = (date: string) => {\n      const formats = ['dd/MM/yyyy hh:mm:ss a', 'dd/MM/yyyy'];  // Lista de formatos posibles\n      let parsedDate: Date | null = null;\n    \n      for (const formatStr of formats) {\n        parsedDate = parse(date, formatStr, new Date());\n        if (!isNaN(parsedDate.getTime())) {\n          break;\n        }\n      }\n    \n      if (parsedDate === null || isNaN(parsedDate.getTime())) {\n        console.error(\"Fecha invÃ¡lida:\", date);\n        return '';\n      }\n    \n      if (isToday(parsedDate)) {\n        return 'Hoy';\n      }\n    \n      if (isYesterday(parsedDate)) {\n        return 'Ayer';\n      }\n    \n      const daysDifference = differenceInCalendarDays(new Date(), parsedDate);\n    \n      if (daysDifference <= 7) {\n        // Si la fecha es dentro de la misma semana\n        return format(parsedDate, 'EEEE', { locale: es });  // Ejemplo: 'lunes', 'martes'\n      }\n    \n      return format(parsedDate, 'd MMMM yyyy', { locale: es }); // Ejemplo: '11 de junio de 2024'\n    };\n\n    return (\n      <Container ref={ref} onScroll={handleScroll}>\n        {\n          filterInChat &&\n          <>\n            <EncryptionMessage>\n              <Icon id=\"lock\" className=\"icon\" />\n              Messages are end-to-end encrypted. No one outside of this chat, not even WhatsApp, can read or listen to them. Click to learn more.\n            </EncryptionMessage>\n          </>\n        }\n        <MessageGroup>\n          {Object.entries(visibleMessagesGroup).map(([date, messages]: any) => (\n          <div key={date}>\n            <DateWrapper>\n              <DateCustom>{formatMessageDate(date)}</DateCustom>\n            </DateWrapper>\n            <MessageGroup>\n              {messages.map((message) => {\n                const isSelected = message.id === chatSelected?.id;\n                const isHighlighted = message.id === highlightedMessage;\n                return (\n                  <SingleMessage\n                    key={message.id}\n                    message={message}\n                    ref={isSelected ? selectedMessageRef : null}\n                    isHighlighted={isHighlighted}\n                    backgroundColor={isSelected ? selectedBgColor : \"\"} \n                    onImageLoad={handleMediaLoad}\n                    onVideoLoad={handleMediaLoad}\n                    onAudioLoad={handleMediaLoad}\n                    onStickerLoad={handleMediaLoad}\n                    onMapLoad={handleMediaLoad}\n                    onClick={() => filterInChat ? {} : onSelectedChat(message)}\n                  />\n                );\n              })}\n            </MessageGroup>\n          </div>\n        ))}\n        </MessageGroup>\n\n        \n      </Container>\n    );\n  }\n);\n\nexport default MessagesList;\n"
        }
    ]
}