{
    "sourceFile": "src/pages/chat/chat-room-page/components/file-upload/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740155517524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740155525451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import Icon from '../../../../../common/components/icons';\n import React, { useState, useEffect } from 'react';\n import styled from 'styled-components';\n import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\n-import { storage } from 'libs/firebase';\n+import { storage } from '../../../libs/firebase';\n \n const ModalContainer = styled.div`\n   position: absolute;\n   top: 0;\n"
                }
            ],
            "date": 1740155517524,
            "name": "Commit-0",
            "content": "import Icon from '../../../../../common/components/icons';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { storage } from 'libs/firebase';\n\nconst ModalContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: end;\n  z-index: 110;\n`;\n\nconst ModalContent = styled.div`\n  height: 91vh;\n  background: #e9edef;\n  padding: 20px;\n  width: 100%;\n  text-align: center;\n`;\n\nconst PreviewContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-top: 10px;\n  margin-bottom: 20px;\n`;\n\nconst PreviewItem = styled.div`\n  cursor: pointer;\n  width: 60px;\n  height: 60px;\n  margin: 0px 10px;\n  position: relative;\n  img, video {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n\nconst RemoveButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: #ea0038;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 3px;\n  svg {\n    font-size: 12px;\n  }\n`;\n\nconst LargePreview = styled.div`\n  width: 100%;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  img, video {\n    max-width: 100%;\n    max-height: 100%;\n  }\n`;\n\nconst Input = styled.input`\n  width: 60%;\n  padding: 10px 15px;\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  margin: auto;\n  background: white;\n`;\n\nconst Button = styled.button`\n  position: absolute;\n  top: 60px;\n  left: 20px;\n`;\n\nconst ButtonSend = styled.button`\n  position: absolute;\n  right: 20px;\n  bottom: 20px;\n  background: #00a884;\n  color: white;\n  width: 60px;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  box-shadow: 0 1px 3px rgba(11, 20, 26,.4);\n  @media (max-width: 768px) {\n    position: fixed;\n  }\n`;\n\nconst FileUploadSquare = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 60px;\n  height: 60px;\n  border: 1px solid #d1d7db;\n  border-radius: 8px;\n  cursor: pointer;\n  background-color: transparent;\n  transition: background-color 0.3s;\n  color: #d1d7db;\n  &:hover {\n    background-color: rgba(0, 123, 255, 0.1);\n  }\n`;\n\nconst HiddenFileInput = styled.input`\n  display: none;\n`;\n\nconst FileUploadModal = ({ files, setFiles, onClose, onSend, isOpen }) => {\n  const [description, setDescription] = useState('');\n  const [selectedPreview, setSelectedPreview] = useState<any>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  useEffect(() => {\n    if (files.length > 0) {\n      files?.map((file: any) => {\n        if (file?.type === 'image/jpeg' || file?.type === 'image/png') {\n          setSelectedPreview({\n            url: URL.createObjectURL(file),\n            type: 'image',\n          });\n        } else {\n          setSelectedPreview({\n            url: URL.createObjectURL(file),\n            type: 'video',\n          });\n        }\n      });\n    } else {\n      setSelectedPreview(null);\n    }\n  }, [files]);\n\n  const uploadFileToFirebase = async (file: File) => {\n    const storageRef = ref(storage, `uploads/${file.name}`);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    return new Promise((resolve, reject) => {\n      uploadTask.on(\n        'state_changed',\n        snapshot => {},\n        error => {\n          reject(error);\n        },\n        async () => {\n          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n          const fileType = file.type.includes('image') ? 'image' : 'video';\n          resolve({ url: downloadURL, type: fileType });\n        }\n      );\n    });\n  };\n\n  const handleUpload = async () => {\n    try {\n      setIsUploading(true);\n      const uploadedFiles = await Promise.all(files.map(file => uploadFileToFirebase(file)));\n\n      onSend(uploadedFiles, description, 'file');\n      setFiles([]);\n      setDescription('');\n      onClose();\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter' && !isUploading) {\n      handleUpload();\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newFiles = Array.from(event.target.files || []);\n    if (files.length + newFiles.length > 3) {\n      alert('Puedes seleccionar un mÃ¡ximo de 3 archivos.');\n    } else {\n      setFiles(prevFiles => [...prevFiles, ...newFiles]);\n    }\n  };\n\n  const handlePreviewClick = (file: File) => {\n    if (file?.type.includes('image')) {\n      setSelectedPreview({\n        url: URL.createObjectURL(file),\n        type: 'image',\n      });\n    } else {\n\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\n  };\n\n  const onCloseAndClear = () => {\n    setDescription('');\n    setFiles([]);\n    onClose();\n  };\n\n  return (\n    isOpen && (\n      <ModalContainer>\n        <ModalContent tabIndex={0} onKeyDown={handleKeyDown}>\n          {selectedPreview && (\n            <LargePreview>\n              {selectedPreview.type === 'video' ? (\n                <video controls src={selectedPreview.url} />\n              ) : (\n                <img src={selectedPreview.url} alt=\"Vista previa\" />\n              )}\n            </LargePreview>\n          )}\n\n          <PreviewContainer>\n            {files.map((file, index) => (\n              <PreviewItem key={index} onClick={() => handlePreviewClick(file)}>\n                {file.type.includes('video') ? (\n                  <video src={URL.createObjectURL(file)} controls={false} />\n                ) : (\n                  <img src={URL.createObjectURL(file)} alt=\"Vista previa\" />\n                )}\n                <RemoveButton\n                  onClick={e => {\n                    e.stopPropagation();\n                    handleRemoveFile(index);\n                  }}\n                >\n                  <Icon id=\"cancel\" className=\"icon\" />\n                </RemoveButton>\n              </PreviewItem>\n            ))}\n            {files.length < 3 && (\n              <FileUploadSquare>\n                <HiddenFileInput\n                  type=\"file\"\n                  accept=\"image/*,video/*\"\n                  onChange={handleFileChange}\n                  multiple\n                />\n                <span style={{ fontSize: '32px', color: '#646769' }}>+</span>\n              </FileUploadSquare>\n            )}\n          </PreviewContainer>\n\n          <ButtonSend onClick={handleUpload} disabled={isUploading}>\n            {isUploading ? <Icon id=\"loader\" className=\"icon\" /> : <Icon id=\"send\" className=\"icon\" />}\n          </ButtonSend>\n          <Button onClick={onCloseAndClear}>\n            <Icon id=\"cancel\" className=\"icon\" />\n          </Button>\n        </ModalContent>\n      </ModalContainer>\n    )\n  );\n};\n\nexport default FileUploadModal;\n"
        }
    ]
}