{
    "sourceFile": "src/pages/chat/components/sidebar/contacts/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1740157103595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740157111229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import Icon from \"../../../../common/components/icons\";\n-import { InboxChat } from \"common/types/common.type\";\n+import Icon from \"../../../../../common/components/icons\";\n+import { InboxChat } from \"../../common/types/common.type\";\n import { ReactNode, useContext, useState } from \"react\";\n import { createPortal } from \"react-dom\";\n \n import {\n"
                },
                {
                    "date": 1740157116916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import Icon from \"../../../../../common/components/icons\";\n-import { InboxChat } from \"../../../.../../../common/types/common.type\";\n+import { InboxChat } from \"../../../.../../../.common/types/common.type\";\n import { ReactNode, useContext, useState } from \"react\";\n import { createPortal } from \"react-dom\";\n \n import {\n"
                }
            ],
            "date": 1740157103595,
            "name": "Commit-0",
            "content": "import Icon from \"../../../../common/components/icons\";\nimport { InboxChat } from \"common/types/common.type\";\nimport { ReactNode, useContext, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport {\n  AvatarWrapper,\n  BottomContent,\n  Contact,\n  Content,\n  MessageStatusIcon,\n  MessageWrapper,\n  Name,\n  StyledButton,\n  Subtitle,\n  Time,\n  TopContent,\n  FloatingMenu as StyledFloatingMenu,\n} from \"./styles\";\nimport { InputContext } from \"pages/chat/context/filter\";\nimport { useChatContext } from \"pages/chat/context/chat\";\nimport AvatarCustom from \"../../avatar\";\nimport { isValid, parse } from \"date-fns\";\nimport { useFirebase } from \"hooks/use-firebase\";\nimport { FloatingMenuProvider, useFloatingMenu } from \"./FloatingMenuContext\";\nimport FloatingMenu from \"./FloatingMenu\";\n\ntype InboxContactProps = {\n  inbox: InboxChat;\n  onChangeChat?: Function;\n  isActive?: boolean;\n  isSearchFilter?: boolean;\n  messageMatch?: ReactNode[];\n  allInbox?: InboxChat;\n};\n\nexport default function InboxContact(props: InboxContactProps) {\n  const context = useContext(InputContext);\n  const { setChatSelected } = useChatContext();\n\n  if (!context) {\n    throw new Error(\"Sidebar debe estar dentro de un InputProvider\");\n  }\n\n  const { inputValue } = context;\n  const { onChangeChat, isActive } = props;\n  const { name, phone, to, lastMessage, timestamp } = props.inbox;\n\n  const handleChangeChat = () => {\n    if (onChangeChat) {\n      setChatSelected(props?.inbox?.id);\n      onChangeChat(props.inbox);\n    }\n  };\n\n  const highlightMatch = (text: string): ReactNode[] => {\n    const regex = new RegExp(`(${inputValue})`, 'gi');\n    return text.split(regex).map((part, index) =>\n      part.toLowerCase() === inputValue.toLowerCase() ? <strong key={index}>{part}</strong> : part\n    );\n  };\n\n  const sortChatData = (data: any[]) => {\n    if (data.length === 0) return data;\n  \n    const DataFilter = data.filter(([_, message]) => message.createdAt);\n  \n    return DataFilter.sort((a, b) => {\n      const dateA = parse(a[1].createdAt, 'dd/MM/yyyy hh:mm:ss a', new Date());\n      const dateB = parse(b[1].createdAt, 'dd/MM/yyyy hh:mm:ss a', new Date());\n  \n      \n      if (!isValid(dateA) || !isValid(dateB)) {\n        console.error('Invalid date:', a[1].createdAt, b[1].createdAt);\n        return 0;\n      }\n      \n      return dateB.getTime() - dateA.getTime();\n    });\n  };\n\n  const onGetTypeMessage = () => {\n    let entries: any = Object?.entries(props?.inbox?.messages || {});\n\n    const lastMessage = entries.length ? sortChatData(entries)[0][1] : null;\n    \n    if (lastMessage) {\n      switch (lastMessage.type) {\n        case 'video':\n          return (\n            <p className=\"flex\">\n              <Icon className=\"!mr-1\" id=\"video\" />\n              <span className=\"ml-2\">Video</span>\n            </p>\n          );\n        case 'sticker':\n          return (\n            <p className=\"flex\">\n              <Icon className=\"!mr-1\" id=\"sticker\" />\n              <span className=\"ml-2\">Sticker</span>\n            </p>\n          );\n        case 'image':\n          return (\n            <p className=\"flex\">\n              <Icon className=\"!mr-1\" id=\"camera\" />\n              <span className=\"ml-2\">Foto</span>\n            </p>\n          );\n        default:\n          return props?.inbox?.lastMessage || lastMessage?.content;\n      }\n    }\n\n    return props?.inbox?.lastMessage || props?.inbox?.content;\n  };\n\n  return (\n    <FloatingMenuProvider>\n      <Contact isActive={isActive} onClick={handleChangeChat}>\n        <AvatarWrapper>\n          <AvatarCustom name={props.inbox?.nickname || props.inbox?.name || props.inbox?.to} />\n        </AvatarWrapper>\n        <Content>\n          <TopContent>\n            <Name>{highlightMatch(phone || to || '')} - {props.inbox?.nickname || name}</Name>\n            {timestamp && lastMessage ? <Time>{timestamp}</Time> : ''}\n          </TopContent>\n          <BottomContent>\n            <MessageWrapper>\n              {props.inbox?.type === 'template' && props.inbox?.data ? \n                <>\n                  {/* CÃ³digo para mostrar mensajes de plantilla */}\n                </>\n                :\n                <>\n                  <Message {...props.inbox} lastMessage={onGetTypeMessage()} />\n                </>\n              }\n            </MessageWrapper>\n            <Trailing {...props.inbox} />\n          </BottomContent>\n        </Content>\n      </Contact>\n      <FloatingMenu />\n    </FloatingMenuProvider>\n  );\n}\n\nfunction Message(props: Pick<InboxChat, \"status\" | \"messages\" | \"lastMessage\" | \"messageMatch\">) {\n  const { lastMessage, status } = props;\n\n  if (!lastMessage) return <></>;\n\n  return (\n    <>\n      <p>\n        <MessageStatusIcon\n          isRead={status === \"read\"}\n          id={status === \"sent\" ? \"singleTick\" : \"doubleTick\"}\n        />\n      </p>\n      <Subtitle>{lastMessage}</Subtitle>\n    </>\n  );\n}\n\nfunction Trailing(props: Pick<InboxChat, \"notificationsCount\" | \"countMessages\" | \"phone\" | \"from\" | \"isConfirmed\">) {\n  const { notificationsCount, countMessages, phone, from, isConfirmed } = props;\n  const { updateDatabase } = useFirebase(); \n  const { toggleMenu } = useFloatingMenu();\n\n  const handleConfirmedOrder = () => {\n    updateDatabase(`${from}/${phone}`, { isConfirmed: !isConfirmed })\n      .then(() => {\n        console.log(\"Pedido confirmado exitosamente.\");\n      })\n      .catch((error) => {\n        console.error(\"Error al actualizar el nombre:\", error);\n      });\n  };\n\n  const handleMenuClick = (event: React.MouseEvent) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    toggleMenu({ top: rect.bottom, left: rect.left });\n  };\n\n  return (\n    <div className=\"sidebar-contact__icons\" style={{ position: 'relative' }}>\n      <StyledButton onClick={handleConfirmedOrder}>\n        { isConfirmed && isConfirmed === true ? <>\n          <Icon id=\"pinnedBlue\" className=\"sidebar-contact__icon\" />\n        </> : <>\n          <Icon id=\"pinned\" className=\"sidebar-contact__icon\" />\n        </>}\n      </StyledButton>\n      {countMessages > 0 && <span style={{ marginLeft: '5px' }}>{countMessages || 1}</span>}\n      <button aria-label=\"sidebar-contact__btn\" onClick={handleMenuClick}>\n        <Icon id=\"downArrow\" className=\"sidebar-contact__icon sidebar-contact__icon--dropdown\" />\n      </button>\n    </div>\n  );\n}"
        }
    ]
}