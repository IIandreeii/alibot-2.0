{
    "sourceFile": "src/services/template/template.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740154567372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740154567372,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\nimport { useAxios } from '../hooks/use-axios';\nimport { useSearchParams } from 'react-router-dom';\ntype LoaderState = {\n  loading: boolean;\n  action: 'get' | 'post' | 'put' | 'putDisabled' | null;\n};\n\nexport const useTemplate = () => {\n  const { execute } = useAxios<any>();\n  \n  const [getResponse, setGetResponse] = useState<any>([]);\n  const [getContactNew, setContactNew] = useState<any>(null);\n  const [loader, setLoader] = useState<LoaderState>({ loading: false, action: null });\n  const [searchParams] = useSearchParams();\n\n  const getTemplate = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/template/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const postTemplate = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/template/create';\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const postDuplicateTemplate = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/template/create';\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const patchTemplate = async (data: any,  id: any) => {\n    const method = 'PATCH';\n    const url = `/template/update/${id}`;\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(id); \n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const putDeleteTemplate = async (id: any) => {\n    const method = 'PATCH';\n    const url = `/template/delete/${id}`;\n    const data ={\n      \"isActive\" : false\n  }\n\n    try {\n      await execute({ method, url, data });\n      await getTemplate(id); \n    } catch (error) {\n      console.error('Error actualizando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const postRespuesta = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/quick-response/create';\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const postDuplicateRespuesta = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/quick-response/create';\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const patchRespuesta = async (data: any,  id: any) => {\n    const method = 'PATCH';\n    const url = `/quick-response/update/${id}`;\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(id); \n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const putDeleteRespuesta = async (id: any) => {\n    const method = 'PATCH';\n    const url = `/quick-response/delete/${id}`;\n    const data ={\n      \"isActive\" : false\n  }\n\n    try {\n      await execute({ method, url, data });\n      await getRespuestaRapida(searchParams.get('acc')); \n    } catch (error) {\n      console.error('Error actualizando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const postStore = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/store/create';\n\n    try {\n      await execute({ method, url, data });\n      await getStore(searchParams.get('acc')); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const postDuplicateStore = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/store/create';\n\n    try {\n      const response = await execute({ method, url, data });\n      await getTemplate(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const patchStore= async (data: any,  id: any) => {\n    const method = 'PATCH';\n    const url = `/store/update/${id}`;\n\n    try {\n      await execute({ method, url, data });\n      await getTemplate(searchParams.get('acc')); \n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const putDeleteStore = async (id: any) => {\n    const method = 'PATCH';\n    const url = `/store/delete/${id}`;\n    const data ={\n      \"isActive\" : false\n  }\n\n    try {\n      await execute({ method, url, data });\n      await getTemplate(searchParams.get('acc')); \n    } catch (error) {\n      console.error('Error actualizando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const getRespuestaRapida = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/quick-response/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const getRespuestaRapidaByPhoneNumber = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/quick-response/pni/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const getTemplateByPni = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/template/pni/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const getStore = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/store/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const getProducts = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/product/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const getProductsToPni = async (id: any) => {\n    setLoader({ loading: true, action: 'get' });\n    const method = 'GET';\n    const url = `/product/pni/list/${id}`;\n\n    try {\n      const data = await execute({ method, url });\n      console.log('Datos obtenidos en getTemplate:', data);\n      setGetResponse(data);\n    } catch (error) {\n      console.error('Error obteniendo los datos:', error);\n    } finally {\n    }\n  };\n\n  const postProduct = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/product/create';\n\n    try {\n      await execute({ method, url, data });\n      await getProductsToPni(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const postDuplicateProduct = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/product/create';\n\n    try {\n      const response = await execute({ method, url, data });\n      await getProductsToPni(data?.id); \n      setLoader({ loading: false, action: 'post' });\n\n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  const patchProduct= async (data: any,  id: any) => {\n    const method = 'PATCH';\n    const url = `/product/update/${id}`;\n\n    try {\n      await execute({ method, url, data });\n      await getTemplate(id); \n    } catch (error) {\n      console.error('Error creando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const putDeleteProduct = async (id: any) => {\n    const method = 'PATCH';\n    const url = `/product/delete/${id}`;\n    const data ={\n      \"isActive\" : false\n  }\n\n    try {\n      await execute({ method, url, data });\n      await getProductsToPni(id); \n    } catch (error) {\n      console.error('Error actualizando el número de teléfono:', error);\n    } finally {\n    }\n  };\n\n  const postNewContact = async (data: any) => {\n    setLoader({ loading: true, action: 'post' });\n\n    const method = 'POST';\n    const url = '/chat/create';\n\n    try {\n      const contactNew = await execute({ method, url, data });\n      setLoader({ loading: false, action: 'post' });\n      setContactNew(contactNew)\n    } catch (error) {\n      console.error('Error creando el nuevo contacto:', error);\n      setLoader({ loading: false, action: 'post' });\n    } finally {\n    }\n  };\n\n  return {\n    getTemplate,\n    postTemplate,\n    getRespuestaRapida,\n    getStore,\n    getRespuestaRapidaByPhoneNumber,\n    getTemplateByPni,\n\n    postDuplicateTemplate,\n    postDuplicateRespuesta,\n    postDuplicateStore,\n    postDuplicateProduct,\n\n    patchTemplate,\n    putDeleteTemplate,\n    postRespuesta,\n    patchRespuesta,\n    putDeleteRespuesta,\n\n    getProducts,\n    postProduct,\n    patchProduct,\n    putDeleteProduct,\n    getProductsToPni,\n\n    postStore,\n    patchStore,\n    putDeleteStore,\n    \n    postNewContact,\n\n    loader, \n    getResponse, \n    getContactNew\n  };\n};\n"
        }
    ]
}